{"_id":"ripple-address-codec","_rev":"84-1b6faa215bf33e0cb56614904196c85c","name":"ripple-address-codec","dist-tags":{"beta":"5.0.0-beta.1","latest":"5.0.0"},"versions":{"1.0.0":{"name":"ripple-address-codec","version":"1.0.0","author":"","license":"ISC","_id":"ripple-address-codec@1.0.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"2175ead3a9f1ee61365ea90317993046b18bc16a","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.0.0.tgz","integrity":"sha512-Siu/earFF+iHTPGSBCh1i9z6zqYRGw3wgUW6k16mciNG8mZgwsyBW/WTUWLfsMZzFC28Uuvx9xl1De+5X8Wtwg==","signatures":[{"sig":"MEQCIGvdbdKarWD92ww5iWds8CaxB55vGLXq2J0QgrTAUQidAiAgWOUqP6XAeulLvEStyI0RwcUloghvQP1dj2x/h3lrZw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"2175ead3a9f1ee61365ea90317993046b18bc16a","gitHead":"d69cbb9043f7a9375300f3eeae91eb4bd67a2f02","scripts":{},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","coin-address-codec":"^0.1.2"}},"1.0.1":{"name":"ripple-address-codec","version":"1.0.1","license":"ISC","_id":"ripple-address-codec@1.0.1","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"5f0420a3c72f2bc5fd12e80356c5a3ea1c46ebd1","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.0.1.tgz","integrity":"sha512-QgQd83syJk58IQvNQk/HovNKvk7udkDuPjnro4NGI9ki74LbGx3UYwzSLR/rfY2V0q8pEimm3AcegvlLdmtlkA==","signatures":[{"sig":"MEQCIAHJJvzPKFHcIdJf/eiSgRt6YUPK5GRCwOihSum3712rAiBkCyqJZEk6ls4KK6Hho840g3BK6IShuM2anWwbnjB8Aw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"5f0420a3c72f2bc5fd12e80356c5a3ea1c46ebd1","gitHead":"d69cbb9043f7a9375300f3eeae91eb4bd67a2f02","scripts":{},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.1.2"}},"1.0.2":{"name":"ripple-address-codec","version":"1.0.2","license":"ISC","_id":"ripple-address-codec@1.0.2","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"9876fbe8f5e78693ee3afff2fcbabd15f2ff5f0c","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.0.2.tgz","integrity":"sha512-A7IPkUFB+W+vBcB6rki9PLf63rJOLYSD0e2ulMgMa69/2EhJ9qnliOpwn1pQdZt3TxrTHL0cSbrAbGPfTqYF4g==","signatures":[{"sig":"MEUCIQD6p6b8giO0mpBBnRlymUWvGjYoUfKla1YPamaUxog+xgIgQKhcCD/p0QqaVUK3z8Oum7z7Xt8rE23scLzfN+GP6E0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"9876fbe8f5e78693ee3afff2fcbabd15f2ff5f0c","gitHead":"10270cd21ee59fb77810df89388fc0d1fefea4f9","scripts":{},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.1.3"}},"1.0.3":{"name":"ripple-address-codec","version":"1.0.3","license":"ISC","_id":"ripple-address-codec@1.0.3","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"03fdd1248ed266d9dc7e09a8b01c562036ed7ac3","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.0.3.tgz","integrity":"sha512-DUTNnI79bV+xky/yEhRDLEqCxhgdsYbsQz/xetFFKq7MbPMH9ilkWLsfp4elFtzqurYEIVv7z+3gX39fA+yOlw==","signatures":[{"sig":"MEUCIQCYlI15dBt/8rygn6Z0m3Kj2ASqk6L2GGHoD7HTMpBhZQIgceZFU0j2XJ2NVLpHj7SN4PH+BWNK57nW4GI6B/314MI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"03fdd1248ed266d9dc7e09a8b01c562036ed7ac3","gitHead":"c5a72b9a16a6d6fd3ad0b04cde4ceef9fc54a3b4","scripts":{},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.1.3"}},"1.1.0":{"name":"ripple-address-codec","version":"1.1.0","license":"ISC","_id":"ripple-address-codec@1.1.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"e093e508b6633ad4c9ced13c51b643c1567b22ff","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.1.0.tgz","integrity":"sha512-gj56lksbtwAuZv7/pkiDTM7tRmxBOrSeny3miiEx7CU2c8iUNUw1JqB3RTZyMYVfs9fgJMeKZtorsszurfBMVQ==","signatures":[{"sig":"MEQCIBLQ4GSQ3MKL2u+okLW20UecdMN7QpRP7UMNsFCKFJUxAiB/bsfUsCS99lAUm4P+vsfyl9XPICVFati2Ue2YZvlsSg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"e093e508b6633ad4c9ced13c51b643c1567b22ff","gitHead":"f280950acfa24f1d6d41d762cedc2b5fac496915","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.2.0"},"devDependencies":{"mocha":"^2.2.5"}},"1.2.0":{"name":"ripple-address-codec","version":"1.2.0","license":"ISC","_id":"ripple-address-codec@1.2.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"edae08e17ec169ed4952aa9dc173e7b12f46e17a","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.2.0.tgz","integrity":"sha512-v8HnusK3ZM5IK2ggf5KFlPgmam0Z94/FJwr7g70h4DYSjNeLFv3VurteEr6LAaBdrBdi+NvDmcXwhYi+oCFDsA==","signatures":[{"sig":"MEQCIBln9uqfpTgsvsFbsaoMIC0cIcdjDVA0j5vCGbf08XJpAiBoz1fGT+5nlkaPx2AYQRchngS/GCM0M66U55FKDxjZAg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"edae08e17ec169ed4952aa9dc173e7b12f46e17a","gitHead":"86ae8c6330b1e9c6a9d4a21f5bc14a7d52c22851","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.3.0"},"devDependencies":{"mocha":"^2.2.5"}},"1.2.1":{"name":"ripple-address-codec","version":"1.2.1","license":"ISC","_id":"ripple-address-codec@1.2.1","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"abaf549024b8592ec213ebc974d953d561de8f79","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.2.1.tgz","integrity":"sha512-FnyoWgAhIKgKOn/bnaOWR8UdKM+Yx+CuNLnNZM3wqHH5P39K16VyXMmhOwQH4qmi1mfyIIvDlX8XbxO4f1qpYg==","signatures":[{"sig":"MEUCIFrh5VF2NBRkzh7Ekd855SMcTrHYQynJH3Q9njfqDXUdAiEApL0LryOM6SBS44JlILL30sbpu/OqIYaa1wM7wV5Xx/k=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"abaf549024b8592ec213ebc974d953d561de8f79","gitHead":"c435b47a250ae4a3f67af3873dc82c7eb9c17dfb","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.3.1"},"devDependencies":{"mocha":"^2.2.5"}},"1.2.2":{"name":"ripple-address-codec","version":"1.2.2","license":"ISC","_id":"ripple-address-codec@1.2.2","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"62ee70cdd967e644f898fcd9bdcd0eff68dacd11","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.2.2.tgz","integrity":"sha512-TzaEw3Uloe1kyaQCHes4Jb1PJaiIMMbtjGf1FhReApTgpPvEkM/VWJlZWbOhz8SHUgmyIVHnjkMNT/rACskEfg==","signatures":[{"sig":"MEYCIQDFzb7askGZpKVJWDsvtkEh3JbapTexgvlZKZ03f0kdzwIhAOzC7qHkkTUv+ooZxxWfaGYD+hnuc9C/VtcDaqmQwOm7","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"index.js","_from":".","_shasum":"62ee70cdd967e644f898fcd9bdcd0eff68dacd11","gitHead":"0938176fba1b857cbe5f2696bef0e67d147cd7a2","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.3.2"},"devDependencies":{"mocha":"^2.2.5"}},"1.3.0":{"name":"ripple-address-codec","version":"1.3.0","license":"ISC","_id":"ripple-address-codec@1.3.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"94b637a41fd5cc9aa03a56e07e71710d68c9cd82","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.3.0.tgz","integrity":"sha512-Xw/KJhNw8UOmis4UWvp81DhSrJACJUApEJj5aAl8/hhqlf3oJ6e5XitcltEmsvgD7ozOWMQdKsR/cwEYJpLjyg==","signatures":[{"sig":"MEQCIE24zvKkepp2pBqVJ/NtWZ+Katw0WPAUSMH+MV2zzoKoAiAez0B3JiOyqwJ8i1B+JE9rvgdSt35+ETbb/pYwuhcmBw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"94b637a41fd5cc9aa03a56e07e71710d68c9cd82","gitHead":"16f17ccc55c42e14b84527a03daa85d132bf7e54","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.3.2"},"devDependencies":{"mocha":"^2.2.5"}},"1.3.1":{"name":"ripple-address-codec","version":"1.3.1","license":"ISC","_id":"ripple-address-codec@1.3.1","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"1ac7f6aed19fbbae8732451828576c0ba2162b64","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.3.1.tgz","integrity":"sha512-jalSg6HC38ZmCyWAtihZY535DUU+9Inue5W38FdQ1XIWnh0X522PnkLHJiFIKHA/o1Ut7IXbsWDml+8WU00ovw==","signatures":[{"sig":"MEUCIQCusEZc1ZZahvWaQYwCFYXSXi6V/swvlPKu9fnWgNTP8QIgDoUTAkAUQ3zFHMz53G03XknpINF1dHfbooqp0pd6hRw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"1ac7f6aed19fbbae8732451828576c0ba2162b64","gitHead":"07053b5997dbf3d17e16028456a23685d79c3db9","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.3.2"},"devDependencies":{"mocha":"^2.2.5"}},"1.4.0":{"name":"ripple-address-codec","version":"1.4.0","license":"ISC","_id":"ripple-address-codec@1.4.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"8809ad013a1ae9e62353e407af1fcfe99de53e2f","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.4.0.tgz","integrity":"sha512-2prl5SoZKmfJ4nH7sacA3X5mSBntxsfG0/INjXXyNQS27MCWIUhieJvLyeg9Wf+XEot2iyH9BqHbfXb2/8E0BQ==","signatures":[{"sig":"MEUCIEZqCRNTwlGYhL2lbuoykNNThB23DcrmDEz9z14eRXRiAiEA7zLb8MxIOpwpj2Qaix2pWnyJTmjCfNTF0JLGjTKIF8A=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"8809ad013a1ae9e62353e407af1fcfe99de53e2f","gitHead":"4f4845824d396efcfd12c044e4595a282af0d327","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.4.0"},"devDependencies":{"mocha":"^2.2.5"}},"1.5.0":{"name":"ripple-address-codec","version":"1.5.0","license":"ISC","_id":"ripple-address-codec@1.5.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"7206ba13f947826a5ec85f4a8ac2d47d83410152","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.5.0.tgz","integrity":"sha512-Qo3cu2FzMvuC9AGHh4FA8jCXFCw4re4iyM4hYgdlL5ohoRtRVWydrzkMYSHG2pAD6futrhntapXmnPrVRJToig==","signatures":[{"sig":"MEUCIQCqJA3PBR/zKTI8e3R7Rm7yqNnfEfaqFlND6mntwukMQAIgKzB3pAVWa4PXX3Yiz4PnnimG0W6J02+U0uGzluNHY4c=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"7206ba13f947826a5ec85f4a8ac2d47d83410152","engines":{"node":">=0.12.0"},"gitHead":"cd1919dcb161e2440a8edd2c98d9d8fd38c6e10d","scripts":{"test":"mocha test/*-test.js"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.5.0"},"devDependencies":{"mocha":"^2.2.5"}},"1.5.1":{"name":"ripple-address-codec","version":"1.5.1","license":"ISC","_id":"ripple-address-codec@1.5.1","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"c561ae67b3c456a1479041b8afc41a204a86c3a0","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.5.1.tgz","integrity":"sha512-qyXptWm9SPUTxj63HaETDlbMyeO+7bDMPdeM5c/MAlq2vNzz/xe5SNGWV7i5J4z/zHwqp0NMRGVijdhHQmlD1w==","signatures":[{"sig":"MEUCIQDmObe6UjVMsc67LnHQ2zQz3upQNgj6lWcl/oTVH9XWowIgBDHSmUMrRd00pHgnlfbSQ5lxK1dcLdqmQj9qW2mm3xk=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"c561ae67b3c456a1479041b8afc41a204a86c3a0","engines":{"node":">=0.12.0"},"gitHead":"3d4a418173fd9b7f282f1ea84d0484f951c7bc15","scripts":{"test":"istanbul test _mocha","coveralls":"cat ./coverage/lcov.info | coveralls"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.5.0"},"devDependencies":{"mocha":"^2.2.5","istanbul":"~0.3.5","coveralls":"~2.10.0"}},"1.5.2":{"name":"ripple-address-codec","version":"1.5.2","license":"ISC","_id":"ripple-address-codec@1.5.2","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"58c711a5796d04e0c488c346be50982bdd4ffab0","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.5.2.tgz","integrity":"sha512-Rp6QPqKgtmtU2hc+7UtrctLxin6kXbRZxUEAp+F7JMBQH2lwTBi3jX+LbrMWThsH0aM1LHH+pycPgIYjKndt7w==","signatures":[{"sig":"MEUCIFo943OoCx75i7t+j6Xre1C8d4p7HhhQdYECJXa6BYIQAiEAn4fVVvONW6Hc0zsT9hB/YAhKyvlTR9h7XgkJuesnKzo=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"58c711a5796d04e0c488c346be50982bdd4ffab0","engines":{"node":">=0.12.0"},"gitHead":"12b521004b8fe81a869c28f6f92381549b814402","scripts":{"test":"istanbul test _mocha","coveralls":"cat ./coverage/lcov.info | coveralls"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.5.0"},"devDependencies":{"mocha":"^2.2.5","istanbul":"~0.3.5","coveralls":"~2.10.0"}},"1.6.0":{"name":"ripple-address-codec","version":"1.6.0","license":"ISC","_id":"ripple-address-codec@1.6.0","maintainers":[{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"3066eb2ea047aa9b07e35d0868b057cebea07e5e","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-1.6.0.tgz","integrity":"sha512-OaIg7pb8MejIyxRFjl5GvN5KTUR+FsqQowbPvXDHOqsBg5qZR4P3LeG5cMZ8eCxrdwqOoW9otvHv+jXSECCt5A==","signatures":[{"sig":"MEYCIQCx1X515XbUnEtTYD26smngQFfIk5YKSBQmZEcP3/KkgQIhALlXiHhQ0NAM6eMco62U4Zx5rrfBSQMjQohFGj0ZoySp","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"3066eb2ea047aa9b07e35d0868b057cebea07e5e","engines":{"node":">=0.12.0"},"gitHead":"28e262cbc3ccbe7935c2f8c368e2a08fd582b88c","scripts":{"lint":"if ! [ -f eslintrc ]; then curl -o eslintrc 'https://raw.githubusercontent.com/ripple/javascript-style-guide/master/eslintrc'; fi; eslint --reset -c eslintrc src/*.js test/*.js","test":"istanbul test _mocha","coveralls":"cat ./coverage/lcov.info | coveralls","prepublish":"npm test && npm run lint"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.6.0"},"devDependencies":{"mocha":"^2.2.5","eslint":"^0.24.1","istanbul":"~0.3.5","coveralls":"~2.10.0"}},"2.0.0":{"name":"ripple-address-codec","version":"2.0.0","license":"ISC","_id":"ripple-address-codec@2.0.0","maintainers":[{"name":"clark800","email":"ripple.npm@gmail.com"},{"name":"niq","email":"ndudfield@gmail.com"}],"dist":{"shasum":"7c8425afec3cf1c0f0ed9e302c728647efab8caa","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-2.0.0.tgz","integrity":"sha512-6bkKsC9ALxRO589fpZXl6eATkLjozun7uSsthjqjCw9EujTCew1ZTugocHDM2+swUHLB5KQfHImuQBgNJWpWMw==","signatures":[{"sig":"MEYCIQCiM3H5unu1oZk6igoYQ2LMn2bE6wq6zRT3YqByNzrUWwIhAL+mWWaRfAUC605gK31yjsyv0waXeL/kyEibxk5jV815","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"7c8425afec3cf1c0f0ed9e302c728647efab8caa","engines":{"node":">=0.12.0"},"gitHead":"6b03bdca179992d07c5c65ac2c591b89b338b6d3","scripts":{"lint":"if ! [ -f eslintrc ]; then curl -o eslintrc 'https://raw.githubusercontent.com/ripple/javascript-style-guide/master/eslintrc'; fi; eslint --reset -c eslintrc src/*.js test/*.js","test":"istanbul test _mocha","coveralls":"cat ./coverage/lcov.info | coveralls","prepublish":"npm test && npm run lint"},"_npmUser":{"name":"niq","email":"ndudfield@gmail.com"},"_npmVersion":"2.9.1","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.3","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.7.0"},"devDependencies":{"mocha":"^2.2.5","eslint":"^0.24.1","istanbul":"~0.3.5","coveralls":"~2.10.0"}},"2.0.1":{"name":"ripple-address-codec","version":"2.0.1","license":"ISC","_id":"ripple-address-codec@2.0.1","maintainers":[{"name":"clark800","email":"ripple.npm@gmail.com"}],"homepage":"https://github.com/ripple/ripple-address-codec#readme","bugs":{"url":"https://github.com/ripple/ripple-address-codec/issues"},"dist":{"shasum":"eddbe3a7960d2e02c5c1c74fb9a9fa0d2dfb6571","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-2.0.1.tgz","integrity":"sha512-vTyIpxqLRVnhJWvxEpKLc17EjZVQkw8UiOYCMnhVFcu5EwUijL/0LJMbuNmw0o2bdzaAxgoOcWvMSnwea5+F+g==","signatures":[{"sig":"MEUCIFOQuuaTiM0TY9jXTL4nIDOBKtQ/W1mo/50TEyInEU6yAiEA6yITgFvTbkOdlGzdYLMHhSpM6rFmcGRMMhAvd+7b+Q8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"main":"src/index.js","_from":".","_shasum":"eddbe3a7960d2e02c5c1c74fb9a9fa0d2dfb6571","engines":{"node":">=0.12.0"},"gitHead":"9fac2110bc87b51d935412af15eea746ac615e58","scripts":{"lint":"if ! [ -f eslintrc ]; then curl -o eslintrc 'https://raw.githubusercontent.com/ripple/javascript-style-guide/master/eslintrc'; fi; eslint -c eslintrc src/*.js test/*.js","test":"istanbul test _mocha","coveralls":"cat ./coverage/lcov.info | coveralls","prepublish":"npm test && npm run lint"},"_npmUser":{"name":"clark800","email":"ripple.npm@gmail.com"},"repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"_npmVersion":"2.11.3","description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"_nodeVersion":"0.12.7","dependencies":{"hash.js":"^1.0.3","x-address-codec":"^0.7.0"},"devDependencies":{"mocha":"^2.3.2","eslint":"^1.4.3","istanbul":"~0.3.20","coveralls":"~2.11.4","babel-eslint":"^4.0.5"}},"3.0.1":{"name":"ripple-address-codec","version":"3.0.1","license":"ISC","_id":"ripple-address-codec@3.0.1","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"1822cf06b6e73e596ebaf08e85cb9d439dca7b35","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-3.0.1.tgz","fileCount":18,"integrity":"sha512-DXUjjQn5kE6AvWBWFhW7fbMcXW7vAbZ3yLKFGOoIGOmqKQAUJiOhvhWrj/V0+YCk7hah25HqR/8uKhkL7HuP7g==","signatures":[{"sig":"MEYCIQCi0IO5edgsyK3BljT96Ed5RFEz4LJ6xXuoXDLD278OnQIhAOOuFLfGNaBLYaZJUIWn/RlbX9vAoJQLq36wNjl+hr86","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":35565,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdbruFCRA9TVsSAnZWagAAif4P/3CW3Fj0fft722EhhYxU\neLzzI/OOdbEyAV0IZ/CbsYlqNqWdxdNuBqUw6/bdid1vsF/p2eKF5iZKaEQr\nCOKpeVDJLhvqcA5ysYGHg+5JljHqzDKCyHbsI9c7y2w+L/2GvB1WFiaCTIDq\n/fAFSARpYi9msuWFUoCDNW9vUQXCEfMGpPh5TQOZICNBdF4Rzwzbh2nN4RCE\nveyB+19Vw4hmLExdKF7c8XTl0ULCfFOB5PqCosPeaQiB9TuEAIq6MUQGAUEw\nWoymATItxP4Fry2FBO7aK3e/+AmFs6qPjnd+4evrgWFYmmFKoCjZ5RCqqbrQ\n7W0AZFgbg4u7J6CHWN9u5lfhugNI0C9MpvssNggbM8fIRiQ92LSOs/0JLPKh\nX0Yxqgb6UlKV53O+QwjYwaElZ5otTHNXnu6rYTR+09m/mz0hLp99aiEMZ7of\npxJ+12doga6m15cYZaTTk6wEEnZM/RPd9fF/46DdcardmO4z0NG0/qKKbneL\ndaNBZ5S7WBON5s8cjzCJ5hS8xr7xLITOcqUqpzgQls8ZzCPrN+uLXJq+62hL\n+GoKgaRg+VczymUWGQnjaVK1BQf0XsaSYgKUL2bUe3KNWxSbXdQAANZX5rXR\n+Vr3NjRyYPxLMCs1JrqEucNvyUNItQWO0BYoTKIZcU6tR7sMXhxGbxjf2g5s\ndi5W\r\n=mecy\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"tslint -p ./","test":"tsc && tslint -p ./ && mocha","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded ripple identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"^5.0.5","tslint":"^5.19.0","typescript":"^3.1.3","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_3.0.1_1567538052597_0.04299624720984263","host":"s3://npm-registry-packages"}},"3.0.2":{"name":"ripple-address-codec","version":"3.0.2","license":"ISC","_id":"ripple-address-codec@3.0.2","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"ad9ea8772ad46956cd9b42280c8f83740968f9f5","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-3.0.2.tgz","fileCount":5,"integrity":"sha512-vMQ/qPHDp6c1oR6tA8kIl1ltzlkTKmSBm1WFiQtY9dam923J2Gi6/ZoXcRYKQhd5NvF7gchc6WeIHgqtFsRCnw==","signatures":[{"sig":"MEYCIQDdG+/FdJ+trz9pboYCPWf2XRux7raCtXjrWZJzvdyMqwIhALgGNJdwAAUipSa6TuCC4B1gQ8qflPHd5DxyoV8wF+Fo","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":1742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdbryyCRA9TVsSAnZWagAAiQcP/1xZxvLsQHoJyB+tDCU5\n95uhV5HWsuVaf3z0r1gtbEXBKE6ihUFpU3C1vNOcFSaMstHS5A4Gp+DW/Vpn\niHcrGhKM7V2Dnw3YNSU2zkk0/h9knh9jIxiZ2+SNKhVBs1zgKiXmk49ZISuZ\nH+Yh1rP57o8ESeOybtMEKddVgc3eOoSLD6CNK2v5JS8N4zHLWXyUl98JJZ11\nvJrrNndWkMCTNKqxswUavfuhOCx3tx3HEYuKvoZiWj3vLf3/HrGbIonPncQ9\nMkwlpY1Ee1GGkZ+lZCBi6U3ioErl+8O+Kfal9oDPd4RFvRjypGsFjmK8W4qy\nHj0IdYSZmMYyNKaRCZXxC9uKqerGpRH7XdcQjxknI7h6yPbHonslgt9s4KK+\n12Tox4dgzKCkZyZUCFp1hNPnW9I8Pi80/ZL+2+3RNfDtRvuuH+FcPLXNzCO+\n/mVO05QL4pfeq3x4RgVnPV46M+Ae2d/IC9PXB+rTGMQ+RCvbo02zD2LxZ2R5\nnS09MDhRu+QJfLzyAdiM33lsGz7bQYNASxfdqJbT00QsxyoYWvXBCTin3FsA\nx5+oSRGhvkmvcY/By6MtPBxw89B6SAm9LkPKNUbMMFm3Vy4HTPxH2r5J50j3\nLqdVFMqjTNLqRiv8tuClD1iRXOlVdd7ZExPjKN1CrKf4oivsEsp2aFCMx2TH\n+RZQ\r\n=kaTv\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"tslint -p ./","test":"tsc && tslint -p ./ && mocha","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"^5.0.5","tslint":"^5.19.0","typescript":"^3.1.3","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_3.0.2_1567538353318_0.18982806087277382","host":"s3://npm-registry-packages"}},"3.0.3":{"name":"ripple-address-codec","version":"3.0.3","license":"ISC","_id":"ripple-address-codec@3.0.3","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"353cc047d38729dbd735068f7938422a3c048f77","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-3.0.3.tgz","fileCount":13,"integrity":"sha512-v/u0qbvBaDSNv7dYgRhnWrfnjTEhJqKQ+nCsxP8vxp1qgnnXVT/SsND94S8aR3oetdRoVJJdFcysEUNsyc0OSg==","signatures":[{"sig":"MEUCIQCoVGYzt7SC2tgzH05CSL48ECJknjV/gPL6JPm3OZb7agIgDUPPaEO2FTTVPYIT67aVPjdF30zTfrLv0OJEAdP2uWo=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":18069,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdbr0XCRA9TVsSAnZWagAANp8QAIjPc5T/atEZ1slsnijT\nPA07EzdZhO9EYAIU5ZDXcDsXlJPcIEt1Nj7xdjXjpBSt2FtUQQ7I+e1UVF09\nj6ac+mM8uNUSpyXH/DbSfrUHo6byQFQo6QnzuLScyV8zahdhnMmlouQN7Wr9\nc3vewOq2f44xqAOXkkP05wdlEGR54KKKYbUNeOPvX460zRzMxA25DaT1GCVQ\nArCkKxfQTtpAZOX/hcj7waRjAiUZZnuHHHQyFW9arbCFM2VOz/17zhy6h59y\nKz0+NpTTy+JatE/qiCnOrSqiqJkoy4MRLfNw9X6KwyBh2rqyi+khzPBBn4JN\n24Fp1HRxjqz3JFNmCMh6hlgnxrsaQeKdC3v7I23jhIJNegkaelOQxU/AhehX\nfklUDITfDv14hVFGQRSL8u8NVFV/W5/UGFXuVpGahmyocRJylNd3HM29z3Sh\n91NsE0Rv1/LKDtEiaSbK4FeBBXXbNbAKKq9sKs2J+WQKo2Q58J+avSnsOjI1\nJWf0iN2woUCk4rtt4gkwjxMRVn6hXBWSLicEKp4D88CuCcRlPI3yFkihb32a\njBppyHOFLDHCRrivEiaW3i0avpxzroIh1GP9MdoIjvmOtW2tiWT+P0eyTaB8\nAP3hL5bwYsK1r+GfR7GS9Gu0KaxkP4sR1d/eZV6vh96eg9INKADlSQjhEdjB\nyFgn\r\n=n+H+\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"tslint -p ./","test":"tsc && tslint -p ./ && mocha","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"^5.0.5","tslint":"^5.19.0","typescript":"^3.1.3","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_3.0.3_1567538454793_0.025050674459050848","host":"s3://npm-registry-packages"}},"3.0.4":{"name":"ripple-address-codec","version":"3.0.4","license":"ISC","_id":"ripple-address-codec@3.0.4","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"a7a8bb040df41cb082330fd828f09b9e6478c7fd","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-3.0.4.tgz","fileCount":13,"integrity":"sha512-GFk1BgavW+9oy5Z1Cp6YAGMfB51QdbeuhOo0Zir+s+S40F5vHtVZYu6zZE1eOAX92A5kygPuBRX4APH2v8Yhmg==","signatures":[{"sig":"MEUCIAbJCDdXpjQzmodbZWhPZZA67dW3e4bhXXUhga3yV61PAiEAtQmtbC8DlKlhOlZV5S89IIQZN7XLu7s82dYii2PeD8o=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":18333,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdbsWXCRA9TVsSAnZWagAAi+YP/RxU4c5KwZdhJEI8xrH4\nPcESfttHbGC84bZAUSZtnX7oME1zf2sFBJdnDoIrO/nv1OhxFniMSCjPGGjS\nkjxTj5K66NRafZ/btv0k+CZBNeGMfxGlqsrR80GzzEZWmTHlAuCNSxOuemcq\noAGYKPR4c7Xbn2gTmQLhyCte9dK9WMAVJ3nkNR+EAZ5o1/uMGIeV3eUsrpaX\nwzWTwr6e785UQV9MplqAbSPcoW/3qIURZysWicW133zBna+tpLBDndfRxRDS\nBqVG6g4+CvJH4zZAhCynoNXmn1IIYC9wwy1ZkKPWovu11W2j8yfYEWkjA7yu\nNM3+zAbm3l5Pj09dckFARXfs6rkZB/nETlDxMiLCgNJvywUiFr4QhAILpxe3\nS3TFAKKQMb7gtbiMa05kPdelJl8XMQYmKDoVWqcW1mEKT4RoymMuNOmP/nJH\n8B4kbl45hErvrJ86543FcBDW4yRy+wwUhCFrVngDhZJ7VGDfXTBzr8+dl74N\nwQb5srL28j1PRs7QxdZIGbAyyWjT71r7Mnjb3ZWIdDizt3Do8UIDnXfiHQ4P\npopeJGGz/7dcVJRKZQMfjgWflKEDHwKQ26dIqzS6uCaeBfT8hKsTIrD/Q2/g\nK0z/Zs6gE/HlU5dqb0ZsrMo9f2V96KNwg/NdLknCUcBOTOaz0USPXdCPKvDS\nU4Ls\r\n=qgLS\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"tslint -p ./","test":"tsc && tslint -p ./ && mocha","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"^5.0.5","tslint":"^5.19.0","typescript":"^3.1.3","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_3.0.4_1567540630903_0.9486742121969183","host":"s3://npm-registry-packages"}},"3.1.0-b1":{"name":"ripple-address-codec","version":"3.1.0-b1","license":"ISC","_id":"ripple-address-codec@3.1.0-b1","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"274ab3f3f08ea06813800c53e30d594c0cb0cc46","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-3.1.0-b1.tgz","fileCount":22,"integrity":"sha512-/Y4pAv5il2GzeyEgJIFUCzaR/M/8R86FsnJ3qMQ+pqr6Cfr2i5EEZTlWD7ca7x01Gfuem+JGkcWHqxKsED8RYQ==","signatures":[{"sig":"MEQCIDmRMgv5AIlYu/x6otp5NBVTQAYOB0CnZOuuiNQkGk8xAiA+fade7PCiBJBDfF1RET9XpFhrii67IQ7mH1Fr05M5Uw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":55031,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdi60MCRA9TVsSAnZWagAATUYQAIXKlzBD4bGIJ0TpNICL\n95yX+6qWW0QV6ZigOr9MUGwd/igXjQIMpyYlTIP9QAdYQI5ELtF/IXbuBWqv\n85TtMpZtaKR9518n2Qgq+OwuVbIvkwWDD58FIe0Q9SUrelG/YfoozFzgDPxq\nklzRgS6M8D+sKVZmFtmwKczHN0HVdSrnJNLJGmd0fBpEd409B3G0r0QycudY\nuCB5vX4/foI6As8lB8wgfgZ//S1WcdKK+k4kODy+BLYXYGnnnPCckzb13X+R\nR+Z7gtIqGak6bWUC8AvWRCL2VX4kX0QylUi8nMwl/YPIs41QgoREkzlJP7XN\nTpbHbY/uUN2+bgV6S8p/d5P16d+ZBJhuyOP6D9qfvr/EhnTRJYHjZKJvbdLE\n/SfVLTWzvYTsMgsMULQTCEyTx2HEZMh2S6M6zLQRQkOc1VGcxjH/vGcEmviZ\nW6UVUugkUBlLnS1b8rclfe9Z8k5rvgzwKw/IKVLnW6CQ/bpHJaqx52HdsCRY\nxLPJBRVuLPyS1zvkXt6s4B1nynfzuzxptI90zvmb6AQgNYw8PZ8Xep7/z5vY\nFAakwE4hAOxWofZVB5RB+rMijBjkM3Ik4gg/4WRdGMzaWsXXI9+zUkL4Rami\nBlgwreplnCQPyGGVcKj9HZGvNxxxj1vHW68oFhRDLMzQoR+mms+9Akdi/uYu\nSgbz\r\n=v3CA\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### encodeXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nEncode a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.encodeXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### decodeXAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nDecode an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.decodeXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_3.1.0-b1_1569434891713_0.8953430504411608","host":"s3://npm-registry-packages"}},"3.1.0-b2":{"name":"ripple-address-codec","version":"3.1.0-b2","license":"ISC","_id":"ripple-address-codec@3.1.0-b2","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"1634e9250a09e6ccd8cb386ec7bc10cac6d0a022","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-3.1.0-b2.tgz","fileCount":22,"integrity":"sha512-axjVE226E8R3dArW+379MB8cLDG+0997sqpO8zNb7YyYTyQiI6uvq4nbl2tvr+2plvlNLg8GCCdyhpEbOjGvEQ==","signatures":[{"sig":"MEYCIQDNPMc/XtVNZGmWkbXfRA2Imcwjp6fl+8e949fGIsdt6wIhAPyPcWlNrL8pWvEotsokWeMrRX0WRDjZkTmRJMIu1dNY","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":56988,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdi8kECRA9TVsSAnZWagAA6yYQAIGIsfhXvtgI4sVqpPsi\nfIvXWIoRQgoRQKU8cR34yhXZ1V70YXkxrumQJqwjuwppRdA3KoD/o55c4UoX\nb4b6QGmcWjn2aCNrkuOS+emPsG9HCMqSPo1XbTJjyNPEDXeca2/rTbhPFlXk\nvpKIKU6S7EC8WbQYbUUJ3vO8rf5INeDgaZg3U5x1GTPo4GwDENc7qWp8xTWu\nRQhzek4cRyZWrBGduiiYbjWIcuAOXFEuF4Arc/NKAXlMa3RIi50vg2tf7NzV\nAOzR+jfIXSrWjaHWThjbDzPHj4x21kk2gTAkvvHbT9JdX9jLrX3wjx7rVxf3\ntCJC8lkMi9NdJMLGeNF/4akOntKG/M7ZFBRKCVwIReFdv/9n8qgn3fXgL11d\nXoY5bGy3jvQQ0WInCu9VALtmfDz8ZEMjV6FCKKh6XWzeXMmE36/df3YzA8Dq\n73kX7PcYfdm6WwYDAc568FpINW8dgydbe2TKpmCyjAIN/ki/Sigb1XAo/l1g\neoTcKxGPnJlYPvunGw6gmWUBSB8sKpS/czIB3eVJsJFqLYgctdTOeHnDYhmf\nHUqR/RyFV/OzYxwrlFwaBnHFZBvHazw9A6j2E205eO1V0nf9Ldw8U9D1MYUd\nTjxN3T+SQ63WL9n30rVRgBiNtnotCjd9vM8MX8fFhcrLrZE024esHJ7jaRdW\n671P\r\n=58do\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### encodeXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nEncode a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.encodeXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### decodeXAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nDecode an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.decodeXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_3.1.0-b2_1569442051862_0.11388864841173363","host":"s3://npm-registry-packages"}},"4.0.0-b2":{"name":"ripple-address-codec","version":"4.0.0-b2","license":"ISC","_id":"ripple-address-codec@4.0.0-b2","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"fd7492bebc39158056aa97a5305f94d65fd01e8a","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.0.0-b2.tgz","fileCount":23,"integrity":"sha512-7wYQ7oUoHW0dqPLGqfN3fNLT0eF4WnzgN3c0cqNNyXT8A2JY9eXR+Lz9mXWsnCSMraP3t7EOl4Cb3BnQtA9ewA==","signatures":[{"sig":"MEUCIQDGbRX564/Fmq4qxxuyAD3KjewRzzqFvkhs4+2Zm9hvwgIgFU8kuGAyDl4YmKrkQ4D27xZw5LaaFX0Z9NGHq1Z9KJI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":57580,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdjIEICRA9TVsSAnZWagAASUIQAJ6i7Wt1uft41CCv+/GW\naOyLq2vWg4j7tIXFi6gBNg+x4FDucLPOadvj5rl5hCioGMlDH+YxooSrJbJg\nKbPsZexXappa9Kc4CskI45JKhx+60PE6b/JSBmYKe4yNkIyd3H3Pi8bm90zL\ncAWQMmS3IV971DHyKl7okxxsh0nAcYKZMug5xjzr0y8KV7rqhxS0fIQJVtNi\nQNASmUMSAkZdHeSzvkEeMKNQDt4Ls27yLdfq0DCIj0PO/U3Eirk68SFg1v3H\nZE5zFN5s0WesEi5WT6khgpg5Noauek6oNZ3Kug7M4N0DPbiMopQQ/w76DOqS\nkEQKUUelAncnL93eupI15ZvYxafNCIH3iWmHmFothMFxsCtPTjJqi9TtHeda\nCWUjbZ+uTb07YupApbNgbGki67q0sbQPPhXf0yar6IKebbC3CTwkQ3yinVgd\n01xZpjFsA2shp/H+3wl05WSkUzkJJncPATiL8D2cc/G5WxzV995x42yZOdRy\ndsPGlvCkzjd6omTdBP1zZsmD0InSXmdX2dcbc3dATxXqiQPzbbp+o9aXH1z5\nenLuYNH5iN3Fl4tFdDEPAWvNHDuHBmMb+3t5opx2xVQANQseRVdrPVKgP685\nT2a8Hm9NMeCYosHUX5iP0PmneB4qmyi1QhB7/nItafCqVyIRi1YVqG4Vu+Mx\nmJri\r\n=S/tT\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.0.0-b2_1569489159623_0.43288064291818884","host":"s3://npm-registry-packages"}},"4.0.0-b3":{"name":"ripple-address-codec","version":"4.0.0-b3","license":"ISC","_id":"ripple-address-codec@4.0.0-b3","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"d015f751971d6c86052939e25f6c0ca9a49d340f","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.0.0-b3.tgz","fileCount":23,"integrity":"sha512-YraLfpvqHCxhBudmxvp6UwpdKTmxwBF37QgoIjVjllMJBXmonq55F50jV4kZKbVqYdpBT0jznZ7e5L5z5Ol0Dw==","signatures":[{"sig":"MEQCIE9/+S6HnRv98FCDeej+maG7EA4sFhobQNhl4l30A47nAiBk0hIUTMhjIYhDqwbn3GmUaFI7T6qdtG3hdMVkiJ7REw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":57586,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdjIbxCRA9TVsSAnZWagAAFowP/RauZbYM6qhb5Wl1cyPw\nLr6d4CWUdaMR9E9OMSbBAqyfeynvdcr8HXTrcXcTG6ebrum0oa0aUIy5csMf\nhju0Y2Wd0c4JTWRth7vgiOKLZI+d87n3z4laV/WRLsMK9Q3KD9GYchzNvjd8\nWQx3KHnhzSkTzk4dv6zmXJbeT5izldImU1dMnjFz0RjjylZyJboflFLz9hSt\nPJmU18hsCcK2x3nAXVkYkH2WNXOehIrZ+WOUx2Y6TcYW5dP/xtNcPMC1ccY9\n9y4mUzRokFzs9AQa3GrlZjnEUp5ASU167vx838Z9ncqgLDk+rwMNMvuH9iIB\nnxJLRvla7zIuVYLbFXNpdiqwl7C+TVImD6N6BTdIzDo9GNVbD+XI9kKePpET\nJept7P8N0KrGG52RqqsQ83cmVk/fyNiJCN+pjz8+cpgwLdYy6Bjx3DdQ7BV1\ntxd4HiTndwwJLxSV0IQ6y9Dg6zySXrI7Ex9ZWG7VRE8f0kKyTg2p9GQhrVp4\nwdPp41+Y3iSzD1oW40HdS/kB1aSIuxnPFkehAqEHxXfRib/tW9mcditWQYXb\nr9hOrhOWSJWe4/KvsU5XU/QAFGlZx66UeFJIHYNao1G1gFHsyBm1SY7HTyk3\ntkDhR+CRHg+u+QC/PYjUX1XyOuW6VEUBfEhNG6kVppp3Hm+A3uFMR9eyv2K2\nPNXV\r\n=ZpMp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.0.0-b3_1569490672558_0.25375081006801126","host":"s3://npm-registry-packages"}},"4.0.0-b4":{"name":"ripple-address-codec","version":"4.0.0-b4","license":"ISC","_id":"ripple-address-codec@4.0.0-b4","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"homepage":"https://github.com/ripple/ripple-address-codec#readme","bugs":{"url":"https://github.com/ripple/ripple-address-codec/issues"},"dist":{"shasum":"619fa54c37dc6b3c88cf73ec264ccb31d2a3b0d3","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.0.0-b4.tgz","fileCount":21,"integrity":"sha512-jWQoYUf8P9l5GoppvhhjL9izFYAklrBS6wJFXjI6nes9Pk1/xG5fHq0MqLVjKBeuR9y6uEKSCEyykh+Mf/VaEg==","signatures":[{"sig":"MEQCIELWqbvGhzSEWUH9IBuOQHmZuSFXCg0h1CwE6Qku9vWsAiBH2LRP6emjkx9/yMoixg9NS3fPA+uCD2p4qd5PZG53lw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":60756,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdjIlSCRA9TVsSAnZWagAAj54P/0r3kOQcNinahtfbwgB9\n82vqu7MN18Lia+ZfgwBwAPfgBZqhiVLk6Bziw9tQ45sQeDx0nq1r0ag1WkQe\n47WSHaoNFtaA69nOpPJIYSu7qMaqMR8WUIDsifvLWf9qI2rw9GXEsE2xn4tE\n7/Tf+a/pfCC2nErGF/jwU2URQisHcT0OzMNllqI4ytnWyiJdxfRlOuu0qIRP\nAn2PrvFziIJG+DknVNayY9jcI4zJfcbxadarbAm4TJHr0pTw23vv7kZa0cwH\nxgsipQc+IrhZhmVziCAXLaTcRB+XirorG7u//JduuKeSKwRRR+3JA2+FCz7J\npBP1w4zwNPcqJLK56xWApTgS1lbJdh/DkRjUvinY1JaBCw2lsYDpYhN/C98o\nk1fQaBnY0MI6AQFGTM7yY20rP/wm92OULgfUdhIAuOTDtE/XSY+Bg0jQ6Y/P\nCQ+3/IW06NVuyEokhydm7X4buX8mPbEGmacnGYbUBK3W3WcyoQ6jaNIAvYUI\nXwP51Kk+hbXRY6wf3jwkNwXUCHbp1X40o9B9UdGIcrJd8WCsPgle3pN1dri7\nf13ZXUPsoo0FJlte2FIopLEaI7Nt/KNLc9k7OaI4GG9zr7sR7vj2p6Wdbywk\nM9ztqcfqoWXeMfKGCF8zFPLGz/T7mg0aKqMB0Z9T2HjWmN7Rg3xvD4C+ZjwN\np9i+\r\n=9Yr2\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","gitHead":"109a9d1c1a5752173fd306d79bde42ec89cbdd8f","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"_npmVersion":"6.11.3","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"12.10.0","dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.0.0-b4_1569491281664_0.831688837196304","host":"s3://npm-registry-packages"}},"4.0.0-b5":{"name":"ripple-address-codec","version":"4.0.0-b5","license":"ISC","_id":"ripple-address-codec@4.0.0-b5","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"homepage":"https://github.com/ripple/ripple-address-codec#readme","bugs":{"url":"https://github.com/ripple/ripple-address-codec/issues"},"dist":{"shasum":"198a5d91474e404659e7a8de9e91d74959a8682b","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.0.0-b5.tgz","fileCount":21,"integrity":"sha512-IXHUBS9yqnrpsLHzmU1qLbk3jC3hJjjDX9p131nVx32GEfn14ef0OrHtOik3bY8gJ54qDf2v0TpUpFN326FPyA==","signatures":[{"sig":"MEYCIQDEj94V73sAMKbu+77rThOjv0KzngJHMvS26tlR/YLRJQIhAMfzChuSWN1PHzRK5kVz/k8DbLMwY1H5LPMT0ELJ4JZG","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":60819,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdjwFYCRA9TVsSAnZWagAAzucP/38LRiKugJbI9FCYF+4T\nFhsC2+e2QB1E4Wpfq1tRCKMr3BPZ/9E0DDPe3nGrBy4Ufv3s9DXOQ082UAmh\n0DM0qSO6XfnNjzN/p86jWSneCGKTc5FGpQwfhUYONEgqz/dIcAg7gG//bCjN\n2FRsYZBNfxplGq0v72Q1+A/wj+Scr9vtMkrLVjZeneE0fFCc4/4xwuxVxo02\n6XqqgCw61jW7T1NfYplYvkXsJ0AHRFK/iAoGrZThrQteznfXXzbA44loiiKU\ngVHCTMbfXTEREiUeRJeeRI8UisXIAT3p8dansVId6rRLm3jQVgjIl7+Z1sjM\nyoZv7sQMSrDPdClCTMlBCeO9N09XdYGrFbTNR41JcVvRehd6KcGEWUApgH3E\nxDKCtU6g3Q1KccKzuo/ksiSKTp+59W2p8zHR8lyarzysZHjg6vI3mEaGL5Ha\naFZY9Qf110CNWRpAoaqPNWQz7RWObE+QtYHfRJlOlFk5bNM31xyrQUykpEHe\n7wPEtthDAQPYpvFjpW9Jp6PkjK9ore0Rate4Q/q+EvHbctkDQGHW2ZKCOgeq\n2v1bFCM52ykLQyaLlmqZfg0pcNn2VPfhenVu7yzgkFcvBS/7E5D5VE5yuvjQ\n/ncoM6aelnpE3UqLnAnLT6rQVWYrLg4CJB4Q6yX/g0qz1ZxQnBIW8HTo6qFG\nTS+w\r\n=JiuU\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","gitHead":"d6b6130a28be8740c6ad2a17d086a5af02fe3f69","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"_npmVersion":"6.11.3","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"12.10.0","dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.0.0-b5_1569653079949_0.2822456686257906","host":"s3://npm-registry-packages"}},"4.0.0-b6":{"name":"ripple-address-codec","version":"4.0.0-b6","license":"ISC","_id":"ripple-address-codec@4.0.0-b6","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"homepage":"https://github.com/ripple/ripple-address-codec#readme","bugs":{"url":"https://github.com/ripple/ripple-address-codec/issues"},"dist":{"shasum":"1ab91b0c929e1c65265a8ef608a9c4fbedc966bf","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.0.0-b6.tgz","fileCount":21,"integrity":"sha512-bJ8sii3iZT4JQ638vO7HxI8gZJp7nlnqVWqqq/ABaAJBqJj2Q1XgSOsAyf1DyX49LzfvFDjxPvcAiA6lWyAs2g==","signatures":[{"sig":"MEYCIQDff67PDYLMftvP9bAH8dvxvETftWNdi16cUQ//t7H3/wIhANdVZEySxrgR2BG1idvoQqwshBNcVu3/OS7QBqZpA83I","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":62650,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdjwJCCRA9TVsSAnZWagAAbksP/2K/tc+GRetLghDmn7Lf\n9LkEOII6Y9zhA6dnQKO8mPsDmLa+a8U3tp+i4Cj/QGghsbQJBmbdL9hqF8W9\nGFtS6IUhmdDqI4NuwbzH8Fen6sRcZ0Fj1bHJwucgMnEA5BKqHdOJjghJ6tud\nailHOrXheZAV8OqpqWUdO9TnJPEaEp2ExV3Sh6wsYKNZPsW8l9ojrj137uf7\nCkpMC82v4J+vNI5IqmFVNTTyAvbfRd066v11je5ne1aBV93NETIcuw/SlGoi\ngNhTGwr9L47PZcol65up556z2hA5glwLgL7g9atpF1wgDFS7IwAsPjo34VX3\nYuN2CvRPHrEf53loA1vYsMs0PAsrsM+Smjb3ou0Ga6AWOVJQhJ06yU7TRrtp\nIbF4k2e0yrf08cTFShJpDcCvd7q6oG82+d8TNDPuHcYFvXnBl2sXE3HmFkbw\nSph4jiUr7bve2sBObVuL7VkJUTI+JwpqZlZEtn5gM7vS9Lz67V7PKbrp1uAc\nTqexqMDdWm9PMDy7RLGhJQBMi8i+ioRhntUA/BgcxS+hZunN0wfpA76Ohdlu\nr3B4dSy+W3NsqdwSoleFe2Qa70464r9oWKzL7jzDBYUxAXK1PukSmCegTq8l\n/xCz+H0y4f2qQDm8D8dQ7C1k8PJwO3aY8BbcbwghSsy2uoDM1DiVSY2epoSK\n3AXR\r\n=JFTg\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec [![NPM](https://img.shields.io/npm/v/ripple-address-codec.svg)](https://npmjs.org/package/ripple-address-codec)\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds. Also includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object will not have a `tag` field. If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> rippleAddressCodec.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: true\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    yarn test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    yarn test --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    yarn test --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n","gitHead":"3dc35a3a6917189133d8d45010378a542ecd8414","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"_npmVersion":"6.11.3","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"12.10.0","dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","readmeFilename":"README.md","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.0.0-b6_1569653313568_0.6337286302434357","host":"s3://npm-registry-packages"}},"4.0.0":{"name":"ripple-address-codec","version":"4.0.0","license":"ISC","_id":"ripple-address-codec@4.0.0","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"c20f39eea38def43d2379462e47bff4adabece30","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.0.0.tgz","fileCount":23,"integrity":"sha512-PsKl9aytg6fZG2F4RtfPT0c1gj42suAQY9VvJVGz+DfQTdXQaTT9V/StVhaJ6jhVpl7oCd981BB9p2Kq+Kyrng==","signatures":[{"sig":"MEUCIQDx2wvjfuOnMS3T6qaImzxqAD6GxrtrU+VAaZo4LKMafAIgXMxxK/ckdgE0YZmDt8uThysr3eDbpvbW5V/5m76om+c=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":62648,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdnSKWCRA9TVsSAnZWagAAMdwP/2+bgfv63JWFVz9cxPM2\nVs+i0Oy/RFisArZ3//cdkStIi/As0UhGGrPZxu6OEV4r1qJ102mtvuSfXcdg\n8v7z+isZVmjaePglbxp0MCBKtZWK7TvQHfncmkHp8tGbyQsPgnZgFdNoZyx4\noUCY1zSGO/0lTq7Bmu9VKqmV14Ds1T7iiNTcltqdwAps69y5Yl8C7FAlBHwT\nsO9VFCo5cU+sHpMGqJ0uD382TH+ITDYI2uosjKxnOdfbXzkG31SaqsZQzHLn\nxZynoalwfz2IAFk5YOnBymWOYTmZofS9COiDIk3e1sABkGa8Qw1ZUzDraPQ+\ng9st13v/8QTXsc2b7ee16dwI6Hx+Wm398wZMV2q4RJJjXZR3HAJhN8fv1FXF\nZjKpS2X4XXgO2gIeIXwj5MnIQ+gttlhDYjrzMaz7rb9JpV7nsuTD3UkhGbEY\ntzYN5Qq/ZMdspgysBWNKj5lXEfdGl93V59qCKkMjcLBNIX1r3qYbcoxLMmmB\nlZF20QIw9x9z0T3Bsykm85B+HzqwL/t59H1etmoxA1AG+s8+Dx5WXkvZMl75\nB+MQCR4B36MrVu1UjaudCggWxTttPKCDnOl6+bICU5ZXpCzPukKfXrD4TFxl\nADFvOQdZExQdZl3vHAKEynyOsozEZOFap2m/z3I8r3XAucX6q3pXcojrc/WF\n/GuG\r\n=iCHq\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.4","create-hash":"^1.1.2","@types/base-x":"^3.0.0"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.1.3","@types/jest":"^24.0.18","@types/node":"^10.12.0","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.0.0_1570579093775_0.15738916623639732","host":"s3://npm-registry-packages"}},"4.1.0":{"name":"ripple-address-codec","version":"4.1.0","license":"ISC","_id":"ripple-address-codec@4.1.0","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"7a119638527f1ccf1eb4aea3d4a8886bc9ccd5c5","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.1.0.tgz","fileCount":23,"integrity":"sha512-C72gJpwvDagaOUiHyh67otqNqFduB4hjvJFiiPz/8I3FCiUYuvFLXeLhb29CEkoAEdoN9p7pPreLgoHUvwzt9w==","signatures":[{"sig":"MEUCIQCycLZvt0V3X5vVxYNcPgxgWirY9hUVb1ROcU0Ydds23AIgfDsgj+qF5Zif9PsU5ETAulVENaPBfK4x8ZEmCGoygTg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":65617,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeKL2YCRA9TVsSAnZWagAAUDYP/12VCJDzZYrqFbrRWS+B\n8kmsfIqyRvkhFZ+J1PekEwODW4QHsADfG27lIBJhMHqZax9kSSyJ5oeyZ/OJ\nLrXRcWWYd6NRQHtzD0xrtDJTY5xOMrk8LD2fGfZPN+ggaKSNrAOnNIK7PZFi\nw6btm6JZRGvVtFyY1gj50vR6VVOXsmyfrPx1fRYd+APHZ9mpTaISwjyb5biD\n2XBiRhz2NgYoWcfE3S6IobI0Ogp786lEoNsGAmh9fAsFOckYEMluetAZ+nN2\nNc1yMBPOBYvlLThQ5nAbtJ8gmn9qeM3YeQSKaTTfb1YHvdCiMo8j8x0Mbced\nwjhdbuD/hn62NQsalt1NgrCFsYf/G1U760E3aDHgL06OvaPX1WOjkdo/l9+M\nYQt1GpN2lT6fXOaGPyjcrdq/RVKqbjL9jm4KI8AQoRzeYyqOGklXWBD5gtUn\nSDZd1hicpinpbf/kCxYK8E+Y2pCywPGnwO1gIIIM308D4iseAyjI3MGbRl/P\nA0SENcaN5TvdlvKQtY0+u4N9BqiObdP4fA9yDWdxkDrx9tNCeBMgREYrWgem\nU8+4C7u68ZrxXBH+wivzKK+cbvp5nFao7jFMddQ6s7mVDr1FHGiOH0xxxz++\nZjb0w8H0mACIjU4H2IRmnuCQYgCCuOn1Y0ZzNuRn8wPSlQhn6zIxR5qyHdCA\nJqCz\r\n=cs76\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.7","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","devDependencies":{"jest":"^24.9.0","tslint":"^5.19.0","ts-jest":"^24.1.0","typescript":"^3.7.4","@types/jest":"^24.0.18","@types/node":"^13.1.8","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.1.0_1579728279995_0.3606474114299958","host":"s3://npm-registry-packages"}},"4.1.1":{"name":"ripple-address-codec","version":"4.1.1","license":"ISC","_id":"ripple-address-codec@4.1.1","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"shekenahglory","email":"matthew@ripple.com"}],"dist":{"shasum":"48e5d76b00b6b9752b1d376646d5abbcd3c8bd67","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.1.1.tgz","fileCount":23,"integrity":"sha512-mcVD8f7+CH6XaBnLkRcmw4KyHMufa0HTJE3TYeaecwleIQASLYVenjQmVJLgmJQcDUS2Ldh/EltqktmiFMFgkg==","signatures":[{"sig":"MEQCIE2BLNce9TLM75kSueTg8ZDkv1N1y1TQwm0MSPPiYsVLAiA1gEpnTakxQwitChrNwoS8OIl0cV38aICNDVs5Z5G5Xw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":66077,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeh49NCRA9TVsSAnZWagAAOJgP+gNHLlzmnL6f5v1cHDFT\nKjQRdwUk788R8AYmvy9gaQYbYxSfitInUqHktOlMp54o4TdyAl6Yv1dmNNi/\n2IQlm9uPJh/nTGNOA1NkQd2ss9LdLZewDtn0kEvjK3viWP6GQ1WTcxs5xxok\nsCDJ38FWLRzBXE1uVvyyp3ZPixT4LGjNwUkFeHPbr5I61xiWMkmN4s/MbKb0\nSzsm2L9VPIQcTM7c1koYcpM5o7dRWs4bGcao1yKryg68hQbyvfFYJTqvpJZd\n9NDZ/NgQ7EvoevlUPxRVztkylyfN+q8XCa92xQ125hMYT1O1QzGWrlCKVJXM\nUDkalfs3PA9jo5rBebTJiEZ1Rm+7tuWrjznu0cncsQz6O7p5NPoYjW4+9nrz\nfgyI1x0XEsrdYAu8pLqRMIXQvXQC+gGKu8A2RJ1ws/fBggb+nu41ACwLSjEQ\ngUKJ3tVpUehQaMYYi4BOgbYSdx9LKsI0xglTzQXIt4U1Z5W91ZWb4bGs9YRI\nzDDgSLeP8jduO5n3c93UDQBT2v1MTbrbomDmsMdRegTFIe9fvxJ1Cp+u8y+G\nCkqWck/dMGFt30uMDr3yxhX2eOGqQNBxl48nxlgh3btOkPylZsyo/3BwdeLM\nlACiJoVvgQFZDYNixoG94Je2+fj0M9GG7duENqFTGo/a8sYym7FBKEN2d2OP\nhxKF\r\n=3BVb\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"dependencies":{"base-x":"3.0.7","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","devDependencies":{"jest":"^25.2.7","tslint":"^5.19.0","ts-jest":"^25.0.0","typescript":"^3.7.4","@types/jest":"^25.1.0","@types/node":"^13.1.8","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.1.1_1585942348446_0.2749569345271934","host":"s3://npm-registry-packages"}},"4.1.2":{"name":"ripple-address-codec","version":"4.1.2","license":"ISC","_id":"ripple-address-codec@4.1.2","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"}],"dist":{"shasum":"c573309dbd0fdd4ef8c803bf36959b8a716c2aa1","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.1.2.tgz","fileCount":24,"integrity":"sha512-bIhmaxOg6rwVYkPQha9cuHdIdwmD8XTnaklBmyRjFvNZwYJ6Cf0cdCt+SpJd+RRJhRU65+U1Eup6YkoCBrqebg==","signatures":[{"sig":"MEUCIArkHjiRBuwh7djlp87gdOIxBwIn2pzZFEearlsAfD5fAiEAkHSTc6u0CJeO+nDRk733oac2KCCN9CxraZ+i78xDG+8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":83942,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf/JEqCRA9TVsSAnZWagAAF9MP+gK/MEA8807RnCyderNN\nju4Roq2K6ZmoAB+w6FAHvQHxEW0mYUmfTLeS6lyANBRlxzdB4NQDiTDR5SIV\n3C6YD7Vwnl6F6GtE2yqB9sQds1VVR6ztnsa+HyoaNBcbVr1fBbeA37aGR87Y\ncjPq+0ANY4MDTVdllfIZ+ru3DTV1r8fNuMkyWzHITtPyKQeQcfXbQyE0lqw5\nbn42zpwtQ+zA4E66+Kv2QzL8xwgc3rS676VZGBybB/RjXoypl5ZUeeQoyJ3U\ntad0ckMzhHz6ksysVIwAn34MGB9FuGNP2xnnd7NkQpD3TZBudv8cLbHrznkm\nR0dmNwP2cgKark2VN44o2kYpW+KXHS318EYVWY+B6Bg6NqERroL2abmIGe60\nfSBvQojdHTcRC63Ty0Rt64bqPjCT54KRIO5gFN5q1Ia0ZwS0RTQnxSkpsWcV\ngvaE1xOCkKIiRMBxB77TNM11JX2fUJXCQZaoC3LiH7HwaOCTIVC5dXuz0HaX\n30KVDiND39d/PXyWGI9XMscVv8xtvWjYYJzhPs7tEQkgTalcDIekPFijwFsx\ndncmA9IAVsZCKury7Y8Be4ZzcYcSnn87Qy0ZGnEowgTDx3zT0QDyobDtyxmB\n90XTZ7oH2EUBtMc8pIogo0SDPzGc1nM+5u4+vk/wycj2/kQabC6SsZQxTOeO\nIdzb\r\n=E2ZP\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"scripts":{"lint":"tslint -p ./","test":"jest","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"licenseText":"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2020 Ripple Labs Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n","dependencies":{"base-x":"3.0.8","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","devDependencies":{"jest":"^26.6.3","tslint":"^5.19.0","ts-jest":"^26.4.4","typescript":"^4.1.3","@types/jest":"^26.0.15","@types/node":"^14.11.2","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.1.2_1610387753610_0.3445914512443473","host":"s3://npm-registry-packages"}},"4.1.3":{"name":"ripple-address-codec","version":"4.1.3","license":"ISC","_id":"ripple-address-codec@4.1.3","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"}],"dist":{"shasum":"5437e2b7ddfdc7cfd4eb610fc4cf5ece15af949a","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.1.3.tgz","fileCount":24,"integrity":"sha512-9mymOhfCUyLZGwotGPg3I2wMfrwHof0W8ygjhW46UdNgFW6J+OvDB/VS9dbHlgED/41mzECp41IXvTrkc1fTwA==","signatures":[{"sig":"MEUCIB2siJ022lQkrYd+CyZACXWU3JLzt8hp2Z+Ao/eVr+mLAiEA99l6uLyv0Zh8bRr9a7Svftqv6KUa3nViZQ4yzG7IW48=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84257,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgmaCGCRA9TVsSAnZWagAAux8P/20trxSsvga30ktv2U8n\nerdX+qAAEwg9wj5Xt1JLDcjDRZ1RgA+HUlAe/m7vyGOT9qy4FBev0mUsPXLq\nWNeAz1z4GN4Eme4u4+KBzHTFn7NSAnmWHShm+6QgbXFGuVkJuAv/mh7jpCpO\no3T+p/sDrgJxn4tFF/2+4MNCrLqXNqziLs/ayQt7/S9bLDl6xthtcBjqwkLq\nz8JCoEQ0jeTyBvunBQ5Yz5yTsXTT7PvVfu3czjgDB6rsBiAIBPGzStZ19Mg6\nQVLFLhJEhlLh/fMsGsJHXumeQEB6EoF6Rrmd+QMNDRiIrSnHfWQs9N1vAhYF\nl6MBC945QX8pbMVOW7lRu+P/nbaFO6q0YaWUiyubhnOPkkqsda+/06379faU\nBhbFXp+jQAGIe15IEjYhEZvrqwsG9+qIdjX9fikQzWPpmA5gYMB5F/0yt4kX\nRJID+S1WrKfQES106p9vPYfY8s3Lx3HfQWhFP8zQ2LIas0Dj6cULaldlZAER\nVpK2pwvsf/hw5Gc01HAOeO4f59T4+4q5OPCCJUOqgW4P9DYIwaYxwlblxemk\nCNafI9z6VkwlyqUqbbjGcZ6aVLusgsW5weiIqUQRs6389TA3nIqX7PnZV+cC\ncrQHHWcGAEptQ/1IRCj444xQi0RG27sULDwZZqjAgXOrMrbSuaDO/j3+aqis\nK3xL\r\n=pvOf\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"scripts":{"lint":"tslint -p ./","test":"jest","build":"tsc","compile":"tsc"},"_npmUser":{"name":"intelliot","email":"github.public@intelliot.com"},"prepublish":"tsc","repository":{"url":"git://github.com/ripple/ripple-address-codec.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"licenseText":"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2020 Ripple Labs Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n","dependencies":{"base-x":"3.0.8","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -p ./ && jest","devDependencies":{"jest":"^26.6.3","tslint":"^5.19.0","ts-jest":"^26.4.4","typescript":"^4.1.3","@types/jest":"^26.0.15","@types/node":"^15.0.2","tslint-eslint-rules":"^5.4.0"},"_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.1.3_1620680837727_0.9733347424308791","host":"s3://npm-registry-packages"}},"4.2.0":{"name":"ripple-address-codec","version":"4.2.0","license":"ISC","_id":"ripple-address-codec@4.2.0","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"dc3291394ff22f46d8aeac6ef30d51be1416d7c9","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.0.tgz","fileCount":12,"integrity":"sha512-9QhBNDiWjwj7l+WQ7H7klXF/VwxVj2Q0HRhd4vLCueTPoxUtaNQyfvUZFiXJrqxg0heM3/iWxupkq4TwrXgSuQ==","signatures":[{"sig":"MEQCIHTSFCQuAOnUQEOBNFwTN2DxB3XOZSgn4kr3yFE2wEt6AiBAf6eWxxEhJYfg/k0xhGEA6Olztlppjzmj7qJVaqliUg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":47425,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhkzRhCRA9TVsSAnZWagAAQOEQAJ1wEWYpdbBBP7H4+PgV\nD3Y+F17FstWdmLs5RYnUwhu5hEjvb4Eux302QhZ8SlJTVrxP5NqyCAKjLwu5\nKSylrXu+hEehDNtSkKfIxdHEdyFtVdYSTwByBPT75+PE/Y16VMDsbIpkcNWA\n23L2qnLQB8OHdjd0y7oimFQLWfL6vTRiSsVBLcp0nrjxrY+q02jb2UDvqxOP\nVtbYJzAoZAshKTXS27YYLF2SLWry6DTlFpBjfj1A2waMBMiIJl5f4gNz7z4P\nwsFy4DyOLsoIZOK9Z8rvPu48G26BZ6KBIStUs6aZkbnoFk53RdWZqUE/CX0h\noHlTRczu0AF805Jnjqq4PQ9vvW7Tm/cgCV2eFLgk2t9Mrv4fWe8XFHl2uOE6\nZXIQOIXw6BYnrDiNUwgJMoF9FQf9xMF5Zg6dv1hnxuXfyj/6aonC6QABMa3c\nRzYj9CzFTvMM3UiaSw7iquut3SVpjOgvooRLRMnoy2VlaQx4KmSEHdv7fzYN\nETL6kfv1px0YYFT1v87U+lefMhNDfZU5CCh3GKldoP+Genz9Fw1ZH1ZmYzoe\nXDpqhP12Zdwx4AyO7h72Q13tDAE8JQQhpi2mlCl4St2EwIJZzZMyu3n6fZal\nKMcvSMn3DvBv/vCdUq48pTqtnSPT4tPtFVO6A0xM+v/aRPGUmVuCjHIXfO+k\negHV\r\n=SKg5\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"npm":">=7.0.0","node":">= 10"},"gitHead":"f96f38d0d9d6569eddf71fdecae347c62dc9e112","scripts":{"lint":"eslint . --ext .ts","test":"jest","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"7.24.2","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.16.0","dependencies":{"base-x":"3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.0_1637037153504_0.810580609132447","host":"s3://npm-registry-packages"}},"4.2.1-beta.0":{"name":"ripple-address-codec","version":"4.2.1-beta.0","license":"ISC","_id":"ripple-address-codec@4.2.1-beta.0","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"e7e9717db7e9c12f9b3119e9ac367315cb87c31b","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.1-beta.0.tgz","fileCount":12,"integrity":"sha512-+Vtf5uRP9ots58JGQtcl0icrw292qAvGP2eXA4+t35pV54fsLQMq9yiHrrTTmP1kngXaKBQoYFb22ItdT8qJ0A==","signatures":[{"sig":"MEUCIC/zm6dVCMb38ri5p3kZRX1WEIsaBzel+mEUC9RamV0CAiEA9Z5TbaVFv/yY+xYpUxx5MBES/BqFveVypwoUlP7ZqMg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":47369,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpqo6CRA9TVsSAnZWagAAma4P/jc0qvy7T0ft0Tn1oxmW\nBrkIGBAYYtlX5txmgTJ25QMuKWN6I1MV7C1S7QMyJtJ2D1+5wR41TVlSnSYH\nexCM+FtGad9WqCbnlxtCQK6FbKZ50W+FfkKtmEH3Li4Yn/Z/oMrp+7u3K68+\nBNcWVF2fWGnE66WiZYivfbq7G4xbsDH/0Zzg+wyBeqbgmnjN/x78iti0NwsA\ncg6oZlslHDbJSKwMsf+8EwrHq+MZvcGVBvMjj1W7VVZGDY2tKtF8SZkjahXw\n96NlCpo79gmxoiPH13ZkjECqqj8v7CSHWIlu/5wBfx9I4LCbqYnKCxFFMRXI\ntMUFsk4tHWFAbvZOUz882oHHeL6/WOpNmqOyWQzaTy58gwXAIhI5Hh5RXBx3\nU50ESBem06HAxN/6r/X2YnzKucVVcm1I9zFh4c50eMDCaLQTNnvuTsV3I8es\nTXK6iDu0ayo693q+Yufk6KEEtteDOq6eS7RT9AO+qqmDjOYPqeAfoqjb+/XR\nRyoG8sgt/gtZ1ZYDM6vn5Wv3XToeecRO3ng82KMIQs/IzDHHJHLeItp9jxg3\ncKRQuCxivcuJnySISA4gJVSbH2JMmJnEmEZVzdcc+XB5yADMcBV4JKa2FY5S\noywux6dI9HUHNnu6HRgrnY/0M9tMET2z87RzlDDbhe7U9kG5/4Fyc7ZD9V93\ntG2h\r\n=nFcx\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds.\n\nAlso includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n[![NPM](https://nodei.co/npm/ripple-address-codec.png)](https://www.npmjs.org/package/ripple-address-codec)\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\nEncode a test address e.g. for use with [Testnet or Devnet](https://xrpl.org/xrp-testnet-faucet.html):\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('r3SVzk8ApofDJuVBPKdmbbLjWGCCXpBQ2g', 123, true)\n'T7oKJ3q7s94kDH6tpkBowhetT1JKfcfdSCmAXbS75iATyLD'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object's `tag` will be `false`. (Since `0` is a valid tag, instead of `if (tag)`, use `if (tag !== false)` if you want to check for a tag.) If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: false\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\nReturns `false` for classic addresses (starting with `r`). To validate a classic address, use `isValidClassicAddress`.\n\n### isValidClassicAddress(address: string): boolean\n\nCheck whether a classic address (starting with `r`...) is valid.\n\nReturns `false` for X-addresses (extended addresses). To validate an X-address, use `isValidXAddress`.\n\n### encodeSeed(entropy: Buffer, type: 'ed25519' | 'secp256k1'): string\n\nEncode the given entropy as an XRP Ledger seed (secret). The entropy must be exactly 16 bytes (128 bits). The encoding includes which elliptic curve digital signature algorithm (ECDSA) the seed is intended to be used with. The seed is used to produce the private key.\n\n### decodeSeed(seed: string): object\n\nDecode a seed into an object with its version, type, and bytes.\n\nReturn object type:\n```\n{\n  version: number[],\n  bytes: Buffer,\n  type: string | null\n}\n```\n\n### encodeAccountID(bytes: Buffer): string\n\nEncode bytes as a classic address (starting with `r`...).\n\n### decodeAccountID(accountId: string): Buffer\n\nDecode a classic address (starting with `r`...) to its raw bytes.\n\n### encodeNodePublic(bytes: Buffer): string\n\nEncode bytes to the XRP Ledger \"node public key\" format (base58).\n\nThis is useful for rippled validators.\n\n### decodeNodePublic(base58string: string): Buffer\n\nDecode an XRP Ledger \"node public key\" (in base58 format) into its raw bytes.\n\n### encodeAccountPublic(bytes: Buffer): string\n\nEncode a public key, as for payment channels.\n\n### decodeAccountPublic(base58string: string): Buffer\n\nDecode a public key, as for payment channels.\n\n### encodeXAddress(accountId: Buffer, tag: number | false, test: boolean): string\n\nEncode account ID, tag, and network ID to X-address.\n\n`accountId` must be 20 bytes because it is a RIPEMD160 hash, which is 160 bits (160 bits = 20 bytes).\n\nAt this time, `tag` must be <= MAX_32_BIT_UNSIGNED_INT (4294967295) as the XRP Ledger only supports 32-bit tags.\n\nIf `test` is `true`, this address is intended for use with a test network such as Testnet or Devnet.\n\n### decodeXAddress(xAddress: string): {accountId: Buffer, tag: number | false, test: boolean}\n\nConvert an X-address to its classic address, tag, and network ID.\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    npm test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    npm test -- --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    npm test -- --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Releases\n\nUse the [xrpl.js release process](https://github.com/XRPLF/xrpl.js/blob/main/CONTRIBUTING.md#release).\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/ripple/ripple-address-codec/master\n[coveralls-url]: https://coveralls.io/r/ripple/ripple-address/codec?branch=master\n[npm-downloads-image]: https://badgen.net/npm/dm/ripple-address-codec\n[npm-url]: https://npmjs.org/package/ripple-address-codec\n[npm-version-image]: https://badgen.net/npm/v/ripple-address-codec\n[travis-image]: https://badgen.net/travis/ripple/ripple-address-codec/master\n[travis-url]: https://travis-ci.org/github/ripple/ripple-address-codec\n","engines":{"npm":">=7.0.0","node":">= 10"},"gitHead":"a163aba7c71f5ebdb7b1f368a30aa03fc096fd41","scripts":{"lint":"eslint . --ext .ts","test":"jest","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"natenichols","email":"natenichols@cox.net"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"7.22.0","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.16.1","dependencies":{"base-x":"3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.1-beta.0_1638312506090_0.7569838178518105","host":"s3://npm-registry-packages"}},"4.2.1":{"name":"ripple-address-codec","version":"4.2.1","license":"ISC","_id":"ripple-address-codec@4.2.1","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"f3372f6afe645667bc037f7fe4c837ce17b83c7b","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.1.tgz","fileCount":12,"integrity":"sha512-9Rrke6EtWjo00JnJveeDfNfCsfPoUei0ahfvbvurxOhEDIveiemuzfuEvL45uN8ymw66hlP4SVqHLYkslRVsKQ==","signatures":[{"sig":"MEYCIQDjm8q9T9nYoMTfO/yTT99cbAgOMIfWd14dO3tdi5CkMAIhAJi6jdqk40PQfrCs8zFGMz7KZjgvU8qfFrAAbYTIdA5X","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":47397,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqArLCRA9TVsSAnZWagAAzSoP/AsOZGx75pmA7CmUaqdg\n+c1a5LYX8tChXWdflH/qU7FTjwWUKko382PyT38DwxuxomoQH13G87Dwrl9P\nOLWFbieVLTxlRi87bogkzFhh7Mrzdq162/ZQKduiTDIoDlUQATyOf3bLh1JP\nlhmVkWKfdu1FMbBQN02VNH117oz0Sm6HojBilDY2D4yzR1kRtBr3eB5P4wKQ\n2wCf8ckWkX5NVcbKrBbzhzwo+jjz3buHmRpmjvkhDHWgaFCzjcG99idO8lkB\n3h56lfZ8GqW7iHnnduZQMl6nG5AKdVoewedF4yxfjqN34bnN688CRFoWYdOU\nnMxfpjmYhNZbClRjtGrstdH6eVb3cUXDRqBxL11OgHbNLm+n5KbAGXoXRrX8\n36ncJPC5VEjk/ZBQpImWU0EZAq4OL4qiC5aR2sOqp3ZIl08eU32wLGdxRKde\ntMu6g/GcPpi/ChXEmueaV9Hj0lnjVayxpA3oZQzlUmO6V04IFpsh61x9XQ7q\nZez6sDDQAwjS49tVi3eoGQo1BcU9ugUkEyzf2RLAHj8FEyTYKD47Q9wAdllN\ngB7mVSLxJyQgkY2cBpe6ICUkHfug5VKvUWFR/WO17fDphieaFyd0lH7lYBFo\nr7aRDINkXyno15/125HmK140FIFixxxjaAqPzfMZHROi0DHuYaFENRIEXDmu\niHMd\r\n=rQQp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"7c6230b18ec2ed031c7e379ffb94e34b940b6542","scripts":{"lint":"eslint . --ext .ts","test":"jest","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"jst5000","email":"aim4math@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v14.17.3+x64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.17.3","dependencies":{"base-x":"3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.1_1638402763754_0.039921556591041574","host":"s3://npm-registry-packages"}},"4.2.2":{"name":"ripple-address-codec","version":"4.2.2","license":"ISC","_id":"ripple-address-codec@4.2.2","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"68928cfb04b6c80754f1b4ae82d0aec53c9e398f","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.2.tgz","fileCount":12,"integrity":"sha512-+SwDjVS3yBetAPwvLTE2un/WDyaimMTFo5VmvJ7j0Sei28moBtn0lo9RV/CXAtlzp2gWXT4rKml8ynMf8lGO+w==","signatures":[{"sig":"MEQCICc37UadaAa68dbYqF1lTh02ODn2DQg3dnJr+pKFI3HpAiA0LijKqKnLT+VewbQsC6iHx5+miohTMjtRX7SB9KFwGQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":47397,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqSY3CRA9TVsSAnZWagAAPFAP+wYTYxhbEd+kZiTIalrM\n6PZXeQ0xAvP41q3fCSIFDOf3ozXp7V6ODVRSSqHO/BNngq4/AmbP22wu5sJr\nBjOWEPoZumqoTV1ZeoKKRpNLN0UGde8zipRcEZROoyg0hArjFQGale7GobvG\n1MRMAMDco2HkVBbofxKmadJJRDeJh4A0I3rL2OZFgPb84nlGGy+u4YlAhu9P\nJvLsSN8qkyp/WGwl3hN4iWg+KzSnsIzPKDO+eajRzkcxBoZmuitDrkyMDtQZ\nPEXepazS7sLMkKocNz5rlJLfvoXKx+TNpSK/GH6aa1vyAy0D+C3iqhHGjDp2\nD1yM1hsWBkCwUlhpOj0dYcBDVqt379moSeDC7WboDa6YJ2ivJsVK3M81yfsQ\nIBEdtcGfzofEe54ZhBGH150PDU7+gy2q/Zb8qKbzTZsS+pnS1I4pPOnBToy8\nHfETeJCSCCoggk32jCStndN2aRifI0YBzNpx8FCM8puAgwbwU8J4lvlMjHyh\nsNhqLetDYITRn1y11R8vNRTPVSCTtwwGr58ZAFF0F1C7vZvoQXHMgBjWsie6\nEy7iFriqTbFsckTIiFS47ZQr2paxl9BpzxvjGErUSGUgRdd2IEY+A5EtT8kr\nNpD/COOEaLkas5AUMQym34Kx3YGqb+gyuelaAjD7A6QZO5Dj0IYMzl6hIY/u\n3euk\r\n=B3lJ\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"78d9b117941cd9ce06d6f1291eb24e882482ceab","scripts":{"lint":"eslint . --ext .ts","test":"jest","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"mvadari","email":"mvadari@ripple.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v14.17.1+x64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.17.1","dependencies":{"base-x":"3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.2_1638475319460_0.32034788146690873","host":"s3://npm-registry-packages"}},"4.2.3":{"name":"ripple-address-codec","version":"4.2.3","license":"ISC","_id":"ripple-address-codec@4.2.3","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"516675715cd43b71d2fd76c59bd92d0f623c152d","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.3.tgz","fileCount":12,"integrity":"sha512-9Nd0hQmKoJEhSTzYR9kYjKmSWlH6HaVosNVAM7mIIVlzcNlQCPfKXj7CfvXcRiHl3C6XUZj7RFLqzVaPjq2ufA==","signatures":[{"sig":"MEUCIEBSc8zoQV25gzNNZOVxCYNdFSpXvSQc52ubCDwsmR4oAiEA8LU2uy3YB3iAqj/xtcXumZRBprlGFg8HcEholHlxysU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":47397,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhvTCECRA9TVsSAnZWagAAcbgP/2EP0tOGnu5urmsmr4BH\nNhkdoPvinHF6CCuJGhc1Gv5kfYD5m5QUuWMu3zSEiyaXOsOBe/m5EFzLJs33\nP9iTKRbcGg+wWi5T8jlyjQ3CPz/morO+eKwQWgX1cE9vzmNGOmylYK93iZ3u\nJOjgdhyEUBi6v4woyxOX9WZzU/9H3Ut4os4jZ92lcWuKROw+Gko9GgQxhK1Z\nrm0sv0XkjTIjzuVDhtOWD6k89IQIj2V8RPE5jC+DzKxucF/eBoVnqW1kgK7G\nVZ1Z9jt6UTMJiIxdPr/B//hcafE4I4Q+QzMcOJOVJEMGOXx3m0RwRjPpu2jW\nWoyNk4MG3uzjZSFtWmHjvllnbPdBk6R4C9nztlBMrVVbQvr7d4seDAPvBN7E\nkdgi7bdX1swtTQ99CKEibduKrJ28HYGmHDou1P5gYimT5NnG2uxc6FGdKqtt\nUVmSWeRRQH9aciGa0vpBZrVttK1clj9GIoVGnp0ZZefNfeI9Z5YMrkBGqQAg\nz87j55wLdWllIJoXMFV6nn0Bn8xJ4qne/ExWacU2PPZgs/5PhNgnZDuIXYUY\nyhXAWvTEs8jXU8eX/A/9sotGxYREURkKZ/cLIjhynu6j1wobjXiLjQq30spG\njSMg/YVVLKr1QER8J+k90yVUMsHIi575O4ZHrJX0TSxbzli65YrM8v8xzpTh\n/RQl\r\n=DZ2B\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"388c4a6124af2f5de12c3ce4e0dc0882d6f7cb65","scripts":{"lint":"eslint . --ext .ts","test":"jest","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"jst5000","email":"aim4math@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v14.17.3+x64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.17.3","dependencies":{"base-x":"3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.3_1639788676568_0.12603122418095425","host":"s3://npm-registry-packages"}},"4.2.4":{"name":"ripple-address-codec","version":"4.2.4","license":"ISC","_id":"ripple-address-codec@4.2.4","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"snifster@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"a56c2168c8bb81269ea4d15ed96d6824c5a866f8","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.4.tgz","fileCount":12,"integrity":"sha512-roAOjKz94+FboTItey1XRh5qynwt4xvfBLvbbcx+FiR94Yw2x3LrKLF2GVCMCSAh5I6PkcpADg6AbYsUbGN3nA==","signatures":[{"sig":"MEUCIQC/QfsuuPKYkQytE6j2Y+pXuJT/O0USNaj6wS6PxJzuHgIgc7zVAp79R3E7MH32HgLbVV0g+dEO6RtHpUhpTwMA+eo=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":48103,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiYdvOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo4+RAAkc02Kzm/+nx9lsXKAqDU3qES+3vAXWoiKK/Niwcpi/ULTud2\r\ntl9KOOaPmJqqL42gOCytuVEVQoo9Yg640r4kA3Gv4wSywiBpEwT/dZ64yBbM\r\nJ8hiKe78xxxcwkiZUwolzN1aIK24ZCxMR/sEm2b734L4Ea3z9HQAU3wTjeM3\r\nm3CD55JrJnH0gY3gaC/vvBwTvP8RSJFop8PRp5Oeos/LIGDpCAhY4sUd8liF\r\na3GqEYF64e/G1rA7mG4tM9w0sPgvGKd75U0LtJAbfvqgJTMFyCKlCcxFY0ta\r\n12YJkAaO5JldrbVhIN7QAI3qys3jwYSSFFTM5+zJF1GfBg4mGvZAFKhyBiyh\r\niAQL0dc8EEm3K9LVOfjyAZfMSmwk6XsrEHk/bZR8By3hSK+f9lAMYRPmtD+A\r\nnFQAk/fKVZx2aYT1zQn5y7n5I31ur1yoCtlOdd/WF17dk5h7JjAlOFbmI5i2\r\nAcET3LZuCcxuuuqUluXtCl+1+jUgQBQakdHywexqPbbIBQHOHiw1hqolLX65\r\nNYvydyqhyp+tIHy7GVUswJxnR6sRHWPddXTd2ejH8mj6KtYiIXNRX40Qf83b\r\nwv5rnsn6ThdsXkNyjQV4gqWFrUWZq6WKbFU4NPEflWpdWXiIHD9wmAgbXXxe\r\nbpZVtunZKW9J1COkGwJvzeqQPe87PMmTZ/U=\r\n=7AcH\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"fc6f85e4510073e9c8996a014aab66536b6f7233","scripts":{"lint":"eslint . --ext .ts","test":"jest","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"ckniffen","email":"snifster@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v14.19.1+x64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.19.1","dependencies":{"base-x":"3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.4_1650580430340_0.9629705167740445","host":"s3://npm-registry-packages"}},"4.2.5":{"name":"ripple-address-codec","version":"4.2.5","license":"ISC","_id":"ripple-address-codec@4.2.5","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"snifster@gmail.com"},{"name":"khancode_","email":"khancodegt@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"9d31b2066abd4cf1a135cd865b4e8e63269701e7","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.2.5.tgz","fileCount":12,"integrity":"sha512-SZ96zZH+0REeyEcYVFl0vqcsGRXiFXS2RUgHupHhtVkOEk6men53vngVjJwBrSnY+oa6Cri15q1zSni3DEoxNw==","signatures":[{"sig":"MEUCIESYCOEFKt4bc0d+CEzxDvf1VML0WsgdwY7gYPEdigB+AiEA1UBKqFxWQMqARJzt/nBooZaB9cL8MkUVQIa4EyGOtHQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":49241,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkCRV5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr25w//fwkrBQ3pS8tfDKfbxu62osR1hY0fbIq06VLz2XIxh/cWQwvc\r\nPOyuUhGBq6GOspHwIL1pPa9WMIIrGJXCcazKIC2avCoW0zDbzBKiJnjGXOUO\r\n8yE4aeHNGFA4xqQLFix/m1Px5MO+LdoHnom8WYLsavJjus9CgInc0wVl0d36\r\ntyKS/umnee2Qgz2DscS2bwFrWFxmlGzOHxd8ZGfJvVtKuCEPv3uQqjZsbpQ4\r\nlO1oBw+STAmHy6LpBrY6InbkduxTBesV5lkUWEgLG1mzgkPEgmu5sReqb0pc\r\n7mLmnFVeUE3PJ99rxs6abOj8NJv65A/lkDMbZdrRc6hk3zV/DoopR/G8JhdC\r\nW2wxOyW2mZsQK7R8aw5iS4cgD/CoZEHRFeH90uSNrNvH3QHrloMJtcJ97yRe\r\n4fgbq0agJQ9fF2EaXXgEl+pnp23QMdsg5sPW1dGSG8vTjBEmAuJV+OLwvXJq\r\n3MHzrF//eBO38ejtXJQ9nDYs0MCiK/Buo9FZCL8aTA52r3OBiOhyrPlbPXPi\r\nrXxXTbDbRVV0eud+vR5hHyGmcF3ck14TL5URjdSRUr4cDl40sk5YX1X3VdBZ\r\nltVPcO9dOSEDMibj2QpnSu2qQHyQmij9zGi3yubuCtWNUP4d+1DDtv1uNQdo\r\n8bQhnu/e1K6Y/kqRV6AAwxkv/AF6rMkVwYk=\r\n=Y36K\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"b3d3bc2f99c21336c32d234026ddff79f16e8194","scripts":{"lint":"eslint . --ext .ts","test":"jest --verbose false --silent=false ./src/*.test.js","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"jst5000","email":"aim4math@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v14.20.0+x64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"14.20.0","dependencies":{"base-x":"^3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.2.5_1678316921183_0.2605285522008538","host":"s3://npm-registry-packages"}},"4.3.0":{"name":"ripple-address-codec","version":"4.3.0","license":"ISC","_id":"ripple-address-codec@4.3.0","maintainers":[{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"snifster@gmail.com"},{"name":"khancode_","email":"khancodegt@gmail.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"45edeb0312b4fe4607b37b7c4cff467802ad571d","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.3.0.tgz","fileCount":12,"integrity":"sha512-Tvd81i7hpDmNqHvkj6iYlj8Tv3I1Romw5gfjni9eacewJvGV2xe+p2y0FAw39z72qfciRMhQyHvpnviBcWVBNw==","signatures":[{"sig":"MEUCIA0p7yjH7AiKsX94JuZTP+r2bkpeL1sXA2EvmXYjAI0zAiEA1roFYf2A6ppGSCQKd/NacLRyIwd6w7AZH3036X5i46Y=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":49241},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"3791c6292cee7e6d6ff46a17fcd26aae2d323439","scripts":{"lint":"eslint . --ext .ts","test":"jest --verbose false --silent=false ./src/*.test.js","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"jst5000","email":"aim4math@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v16.19.1+arm64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"16.19.1","dependencies":{"base-x":"^3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.3.0_1686690970017_0.9481318101519525","host":"s3://npm-registry-packages"}},"4.3.1":{"name":"ripple-address-codec","version":"4.3.1","license":"ISC","_id":"ripple-address-codec@4.3.1","maintainers":[{"name":"justinr1234","email":"justinr1234@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"snifster@gmail.com"},{"name":"khancode_","email":"khancodegt@gmail.com"},{"name":"pdp2121","email":"ppham@ripple.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"68fbaf646bb8567f70743af7f1ce4479f73efbf6","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-4.3.1.tgz","fileCount":18,"integrity":"sha512-Qa3+9wKVvpL/xYtT6+wANsn0A1QcC5CT6IMZbRJZ/1lGt7gmwIfsrCuz1X0+LCEO7zgb+3UT1I1dc0k/5dwKQQ==","signatures":[{"sig":"MEQCIGojeZaqSNHNfm6Li2w7wd7aAE1EnPCjhV3L6iG1/N0SAiAs+qQIeFNGLi8a3kFaUh/uG3RldGJzVAsW0UepgtEZkQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":80776},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 10"},"gitHead":"62cea624f8926ca756af53d6fd313e405d34fa79","scripts":{"lint":"eslint . --ext .ts","test":"jest --verbose false --silent=false ./src/*.test.js","build":"tsc -b","clean":"rm -rf ./dist && rm -rf tsconfig.tsbuildinfo"},"_npmUser":{"name":"khancode_","email":"khancodegt@gmail.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v16.17.0+arm64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"16.17.0","dependencies":{"base-x":"^3.0.9","create-hash":"^1.1.2"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_4.3.1_1695830004701_0.7674890956001783","host":"s3://npm-registry-packages"}},"5.0.0-beta.0":{"name":"ripple-address-codec","version":"5.0.0-beta.0","keywords":["ripple","xrp","xrp ledger","xrpl"],"license":"ISC","_id":"ripple-address-codec@5.0.0-beta.0","maintainers":[{"name":"justinr1234","email":"justinr1234@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"ckniffen@ripple.com"},{"name":"khancode_","email":"khancodegt@gmail.com"},{"name":"pdp2121","email":"ppham@ripple.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"a3b9ca5107c840310dc1058dffa3860ef181d291","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-5.0.0-beta.0.tgz","fileCount":15,"integrity":"sha512-AixnsO0qtnUCSgM6X0kXb18V+pOVzO5e7vLp2Opxk4ysLFih7liajp1zEcY9ywGdBjI7aflIZJdlnuF3gMvUOQ==","signatures":[{"sig":"MEQCIB9dcvc1HnkQ1yf5coG7HOYaxL7+F5r/FyhmxQ8jnHnLAiALnA958L2he4ff7QXn3tcNFVcTRWcf3O5yswUfgm9X+Q==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":61556},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds.\n\nAlso includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n[![NPM](https://nodei.co/npm/ripple-address-codec.png)](https://www.npmjs.org/package/ripple-address-codec)\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\nEncode a test address e.g. for use with [Testnet or Devnet](https://xrpl.org/xrp-testnet-faucet.html):\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('r3SVzk8ApofDJuVBPKdmbbLjWGCCXpBQ2g', 123, true)\n'T7oKJ3q7s94kDH6tpkBowhetT1JKfcfdSCmAXbS75iATyLD'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object's `tag` will be `false`. (Since `0` is a valid tag, instead of `if (tag)`, use `if (tag !== false)` if you want to check for a tag.) If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: false\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\nReturns `false` for classic addresses (starting with `r`). To validate a classic address, use `isValidClassicAddress`.\n\n### isValidClassicAddress(address: string): boolean\n\nCheck whether a classic address (starting with `r`...) is valid.\n\nReturns `false` for X-addresses (extended addresses). To validate an X-address, use `isValidXAddress`.\n\n### encodeSeed(entropy: Buffer, type: 'ed25519' | 'secp256k1'): string\n\nEncode the given entropy as an XRP Ledger seed (secret). The entropy must be exactly 16 bytes (128 bits). The encoding includes which elliptic curve digital signature algorithm (ECDSA) the seed is intended to be used with. The seed is used to produce the private key.\n\n### decodeSeed(seed: string): object\n\nDecode a seed into an object with its version, type, and bytes.\n\nReturn object type:\n```\n{\n  version: number[],\n  bytes: Buffer,\n  type: string | null\n}\n```\n\n### encodeAccountID(bytes: Buffer): string\n\nEncode bytes as a classic address (starting with `r`...).\n\n### decodeAccountID(accountId: string): Buffer\n\nDecode a classic address (starting with `r`...) to its raw bytes.\n\n### encodeNodePublic(bytes: Buffer): string\n\nEncode bytes to the XRP Ledger \"node public key\" format (base58).\n\nThis is useful for rippled validators.\n\n### decodeNodePublic(base58string: string): Buffer\n\nDecode an XRP Ledger \"node public key\" (in base58 format) into its raw bytes.\n\n### encodeAccountPublic(bytes: Buffer): string\n\nEncode a public key, as for payment channels.\n\n### decodeAccountPublic(base58string: string): Buffer\n\nDecode a public key, as for payment channels.\n\n### encodeXAddress(accountId: Buffer, tag: number | false, test: boolean): string\n\nEncode account ID, tag, and network ID to X-address.\n\n`accountId` must be 20 bytes because it is a RIPEMD160 hash, which is 160 bits (160 bits = 20 bytes).\n\nAt this time, `tag` must be <= MAX_32_BIT_UNSIGNED_INT (4294967295) as the XRP Ledger only supports 32-bit tags.\n\nIf `test` is `true`, this address is intended for use with a test network such as Testnet or Devnet.\n\n### decodeXAddress(xAddress: string): {accountId: Buffer, tag: number | false, test: boolean}\n\nConvert an X-address to its classic address, tag, and network ID.\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    npm test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    npm test -- --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    npm test -- --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Releases\n\nUse the [xrpl.js release process](https://github.com/XRPLF/xrpl.js/blob/main/CONTRIBUTING.md#release).\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/ripple/ripple-address-codec/master\n[coveralls-url]: https://coveralls.io/r/ripple/ripple-address/codec?branch=master\n[npm-downloads-image]: https://badgen.net/npm/dm/ripple-address-codec\n[npm-url]: https://npmjs.org/package/ripple-address-codec\n[npm-version-image]: https://badgen.net/npm/v/ripple-address-codec\n[travis-image]: https://badgen.net/travis/ripple/ripple-address-codec/master\n[travis-url]: https://travis-ci.org/github/ripple/ripple-address-codec\n","engines":{"node":">= 16"},"gitHead":"9e30f1892c20a915c47593ffb8c336595804e4e7","scripts":{"lint":"eslint . --ext .ts","test":"jest --verbose false --silent=false ./test/*.test.ts","build":"tsc --build tsconfig.build.json","clean":"rm -rf ./dist ./coverage ./test/testCompiledForWeb tsconfig.build.tsbuildinfo","test:browser":"npm run build && karma start ./karma.config.js"},"_npmUser":{"name":"ckniffen","email":"ckniffen@ripple.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v18.16.0+arm64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"18.16.0","dependencies":{"base-x":"^3.0.9","@xrplf/isomorphic":"^1.0.0-beta.0"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_5.0.0-beta.0_1697816954589_0.4763263699454008","host":"s3://npm-registry-packages"}},"5.0.0-beta.1":{"name":"ripple-address-codec","version":"5.0.0-beta.1","keywords":["ripple","xrp","xrp ledger","xrpl"],"license":"ISC","_id":"ripple-address-codec@5.0.0-beta.1","maintainers":[{"name":"justinr1234","email":"justinr1234@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"ckniffen@ripple.com"},{"name":"khancode_","email":"khancodegt@gmail.com"},{"name":"pdp2121","email":"ppham@ripple.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"4c2db71d8330f37477810a4b859effa9eb7bd34d","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-5.0.0-beta.1.tgz","fileCount":15,"integrity":"sha512-Yhzwuuh7rxMubNfjENYSvwqxq1GJbbr/HGFiL+3i73m/pIa+5Wp6b0NiCWI1IIxfzt9sqBJvMXgpMN76fkJO8Q==","signatures":[{"sig":"MEQCIG+UpsAOA0wWbneWH19teyKp/Jw2Pnx50Qo1zXzKtPRBAiAGHxpeMqdRptyM1cz7MnMZ8qd8iLRYy4Z3aGAiDBrG4g==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":61826},"main":"dist/index.js","types":"dist/index.d.ts","readme":"# ripple-address-codec\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds.\n\nAlso includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n[![NPM](https://nodei.co/npm/ripple-address-codec.png)](https://www.npmjs.org/package/ripple-address-codec)\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\nEncode a test address e.g. for use with [Testnet or Devnet](https://xrpl.org/xrp-testnet-faucet.html):\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('r3SVzk8ApofDJuVBPKdmbbLjWGCCXpBQ2g', 123, true)\n'T7oKJ3q7s94kDH6tpkBowhetT1JKfcfdSCmAXbS75iATyLD'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object's `tag` will be `false`. (Since `0` is a valid tag, instead of `if (tag)`, use `if (tag !== false)` if you want to check for a tag.) If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: false\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\nReturns `false` for classic addresses (starting with `r`). To validate a classic address, use `isValidClassicAddress`.\n\n### isValidClassicAddress(address: string): boolean\n\nCheck whether a classic address (starting with `r`...) is valid.\n\nReturns `false` for X-addresses (extended addresses). To validate an X-address, use `isValidXAddress`.\n\n### encodeSeed(entropy: UInt8Array, type: 'ed25519' | 'secp256k1'): string\n\nEncode the given entropy as an XRP Ledger seed (secret). The entropy must be exactly 16 bytes (128 bits). The encoding includes which elliptic curve digital signature algorithm (ECDSA) the seed is intended to be used with. The seed is used to produce the private key.\n\n### decodeSeed(seed: string): object\n\nDecode a seed into an object with its version, type, and bytes.\n\nReturn object type:\n```\n{\n  version: number[],\n  bytes: UInt8Array,\n  type: string | null\n}\n```\n\n### encodeAccountID(bytes: UInt8Array): string\n\nEncode bytes as a classic address (starting with `r`...).\n\n### decodeAccountID(accountId: string): UInt8Array\n\nDecode a classic address (starting with `r`...) to its raw bytes.\n\n### encodeNodePublic(bytes: UInt8Array): string\n\nEncode bytes to the XRP Ledger \"node public key\" format (base58).\n\nThis is useful for rippled validators.\n\n### decodeNodePublic(base58string: string): UInt8Array\n\nDecode an XRP Ledger \"node public key\" (in base58 format) into its raw bytes.\n\n### encodeAccountPublic(bytes: UInt8Array): string\n\nEncode a public key, as for payment channels.\n\n### decodeAccountPublic(base58string: string): UInt8Array\n\nDecode a public key, as for payment channels.\n\n### encodeXAddress(accountId: UInt8Array, tag: number | false, test: boolean): string\n\nEncode account ID, tag, and network ID to X-address.\n\n`accountId` must be 20 bytes because it is a RIPEMD160 hash, which is 160 bits (160 bits = 20 bytes).\n\nAt this time, `tag` must be <= MAX_32_BIT_UNSIGNED_INT (4294967295) as the XRP Ledger only supports 32-bit tags.\n\nIf `test` is `true`, this address is intended for use with a test network such as Testnet or Devnet.\n\n### decodeXAddress(xAddress: string): {accountId: UInt8Array, tag: number | false, test: boolean}\n\nConvert an X-address to its classic address, tag, and network ID.\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    npm test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    npm test -- --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    npm test -- --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Releases\n\nUse the [xrpl.js release process](https://github.com/XRPLF/xrpl.js/blob/main/CONTRIBUTING.md#release).\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/ripple/ripple-address-codec/master\n[coveralls-url]: https://coveralls.io/r/ripple/ripple-address/codec?branch=master\n[npm-downloads-image]: https://badgen.net/npm/dm/ripple-address-codec\n[npm-url]: https://npmjs.org/package/ripple-address-codec\n[npm-version-image]: https://badgen.net/npm/v/ripple-address-codec\n[travis-image]: https://badgen.net/travis/ripple/ripple-address-codec/master\n[travis-url]: https://travis-ci.org/github/ripple/ripple-address-codec\n","engines":{"node":">= 16"},"gitHead":"279bc1d15c522cfad0bffddcae24053fa609f7fe","scripts":{"lint":"eslint . --ext .ts","test":"jest --verbose false --silent=false ./test/*.test.ts","build":"tsc --build tsconfig.build.json","clean":"rm -rf ./dist ./coverage ./test/testCompiledForWeb tsconfig.build.tsbuildinfo","test:browser":"npm run build && karma start ./karma.config.js"},"_npmUser":{"name":"ckniffen","email":"ckniffen@ripple.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v18.16.0+arm64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"18.16.0","dependencies":{"@scure/base":"^1.1.3","@xrplf/isomorphic":"^1.0.0-beta.1"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_5.0.0-beta.1_1701385396600_0.446550950381011","host":"s3://npm-registry-packages"}},"5.0.0":{"name":"ripple-address-codec","version":"5.0.0","keywords":["ripple","xrp","xrp ledger","xrpl"],"license":"ISC","_id":"ripple-address-codec@5.0.0","maintainers":[{"name":"justinr1234","email":"justinr1234@gmail.com"},{"name":"intelliot","email":"github.public@intelliot.com"},{"name":"geertweening","email":"geertweening@gmail.com"},{"name":"shekenahglory","email":"matthew@ripple.com"},{"name":"natenichols","email":"natenichols@cox.net"},{"name":"mvadari","email":"mvadari@ripple.com"},{"name":"ledhed2222","email":"greg.weisbrod@gmail.com"},{"name":"jst5000","email":"aim4math@gmail.com"},{"name":"ckniffen","email":"ckniffen@ripple.com"},{"name":"khancode_","email":"khancodegt@gmail.com"},{"name":"pdp2121","email":"ppham@ripple.com"}],"homepage":"https://github.com/XRPLF/xrpl.js#readme","bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"dist":{"shasum":"97059f7bba6f9ed7a52843de8aa427723fb529f6","tarball":"https://registry.npmjs.org/ripple-address-codec/-/ripple-address-codec-5.0.0.tgz","fileCount":15,"integrity":"sha512-de7osLRH/pt5HX2xw2TRJtbdLLWHu0RXirpQaEeCnWKY5DYHykh3ETSkofvm0aX0LJiV7kwkegJxQkmbO94gWw==","signatures":[{"sig":"MEYCIQCEVUUvhARN25PBY5QjpQkj4g2k+RmquTxPynVitKh9lwIhAK3RHLZ7iht3WNnV8nHuZrVm9TdK6liRjovgmgAHN+d0","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":61812},"main":"dist/index.js","types":"dist/index.d.ts","engines":{"node":">= 16"},"gitHead":"a09084289b2ba61eff2363773379573584e084d1","scripts":{"lint":"eslint . --ext .ts","test":"jest --verbose false --silent=false ./test/*.test.ts","build":"tsc --build tsconfig.build.json","clean":"rm -rf ./dist ./coverage ./test/testCompiledForWeb tsconfig.build.tsbuildinfo","test:browser":"npm run build && karma start ./karma.config.js"},"_npmUser":{"name":"ckniffen","email":"ckniffen@ripple.com"},"prettier":"@xrplf/prettier-config","prepublish":"tsc -b","repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"_npmVersion":"lerna/4.0.0/node@v18.16.0+arm64 (darwin)","description":"encodes/decodes base58 encoded XRP Ledger identifiers","directories":{},"_nodeVersion":"18.16.0","dependencies":{"@scure/base":"^1.1.3","@xrplf/isomorphic":"^1.0.0"},"_hasShrinkwrap":false,"prepublishOnly":"tslint -b ./ && jest","_npmOperationalInternal":{"tmp":"tmp/ripple-address-codec_5.0.0_1706824375383_0.31545072014299014","host":"s3://npm-registry-packages"}}},"time":{"created":"2015-06-20T04:44:47.506Z","modified":"2025-09-18T11:49:41.701Z","1.0.0":"2015-06-20T04:44:47.506Z","1.0.1":"2015-06-25T08:32:21.831Z","1.0.2":"2015-06-29T12:43:26.174Z","1.0.3":"2015-07-03T10:29:19.690Z","1.1.0":"2015-07-16T11:37:27.355Z","1.2.0":"2015-07-16T13:05:07.912Z","1.2.1":"2015-07-17T06:49:40.778Z","1.2.2":"2015-07-17T08:40:43.564Z","1.3.0":"2015-07-20T03:55:39.044Z","1.3.1":"2015-07-28T06:21:46.763Z","1.4.0":"2015-07-28T06:41:09.296Z","1.5.0":"2015-07-30T09:59:50.339Z","1.5.1":"2015-07-30T13:23:42.042Z","1.5.2":"2015-07-31T04:59:04.073Z","1.6.0":"2015-07-31T09:38:34.259Z","2.0.0":"2015-08-28T03:54:50.626Z","2.0.1":"2015-09-25T00:24:18.702Z","3.0.0":"2019-09-03T18:23:34.515Z","3.0.1":"2019-09-03T19:14:12.706Z","3.0.2":"2019-09-03T19:19:13.489Z","3.0.3":"2019-09-03T19:20:54.927Z","3.0.4":"2019-09-03T19:57:11.039Z","3.1.0-b1":"2019-09-25T18:08:11.912Z","3.1.0-b2":"2019-09-25T20:07:31.949Z","4.0.0-b1":"2019-09-26T09:10:43.337Z","4.0.0-b2":"2019-09-26T09:12:39.790Z","4.0.0-b3":"2019-09-26T09:37:52.681Z","4.0.0-b4":"2019-09-26T09:48:01.810Z","4.0.0-b5":"2019-09-28T06:44:40.159Z","4.0.0-b6":"2019-09-28T06:48:33.703Z","4.0.0":"2019-10-08T23:58:13.929Z","4.1.0":"2020-01-22T21:24:40.133Z","4.1.1":"2020-04-03T19:32:28.541Z","4.1.2":"2021-01-11T17:55:53.719Z","4.1.3":"2021-05-10T21:07:17.905Z","4.2.0":"2021-11-16T04:32:33.687Z","4.2.1-beta.0":"2021-11-30T22:48:26.263Z","4.2.1":"2021-12-01T23:52:43.983Z","4.2.2":"2021-12-02T20:01:59.618Z","4.2.3":"2021-12-18T00:51:16.728Z","4.2.4":"2022-04-21T22:33:50.480Z","4.2.5":"2023-03-08T23:08:41.337Z","4.3.0":"2023-06-13T21:16:10.147Z","4.3.1":"2023-09-27T15:53:24.960Z","5.0.0-beta.0":"2023-10-20T15:49:14.772Z","5.0.0-beta.1":"2023-11-30T23:03:16.871Z","5.0.0":"2024-02-01T21:52:55.575Z"},"bugs":{"url":"https://github.com/XRPLF/xrpl.js/issues"},"license":"ISC","homepage":"https://github.com/XRPLF/xrpl.js#readme","keywords":["ripple","xrp","xrp ledger","xrpl"],"repository":{"url":"git+ssh://git@github.com/XRPLF/xrpl.js.git","type":"git"},"description":"encodes/decodes base58 encoded XRP Ledger identifiers","maintainers":[{"email":"mankins@gmail.com","name":"mankins"},{"email":"ppham@ripple.com","name":"pdp2121"},{"email":"cshi@ripple.com","name":"shichengripple001"},{"email":"ripplegithub@ripple.com","name":"ripplex-automation"}],"readme":"# ripple-address-codec\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nFunctions for encoding and decoding XRP Ledger addresses and seeds.\n\nAlso includes support for encoding/decoding [rippled validator (node) public keys](https://xrpl.org/run-rippled-as-a-validator.html).\n\n[![NPM](https://nodei.co/npm/ripple-address-codec.png)](https://www.npmjs.org/package/ripple-address-codec)\n\n## X-address Conversion\n\nAll tools and apps in the XRP Ledger ecosystem are encouraged to adopt support for the X-address format. The X-address format is a single Base58 string that encodes an 'Account ID', a (destination) tag, and whether the address is intended for a test network. This prevents users from unintentionally omitting the destination tag when sending and receiving payments and other transactions.\n\n## API\n\n### classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string\n\nConvert a classic address and (optional) tag to an X-address. If `tag` is `false`, the returned X-address explicitly indicates that the recipient does not want a tag to be used. If `test` is `true`, consumers of the address will know that the address is intended for use on test network(s) and the address will start with `T`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf', 4294967295)\n'XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi'\n```\n\nEncode a test address e.g. for use with [Testnet or Devnet](https://xrpl.org/xrp-testnet-faucet.html):\n\n```js\n> const api = require('ripple-address-codec')\n> api.classicAddressToXAddress('r3SVzk8ApofDJuVBPKdmbbLjWGCCXpBQ2g', 123, true)\n'T7oKJ3q7s94kDH6tpkBowhetT1JKfcfdSCmAXbS75iATyLD'\n```\n\n### xAddressToClassicAddress(xAddress: string): {classicAddress: string, tag: number | false, test: boolean}\n\nConvert an X-address to a classic address and tag. If the X-address did not have a tag, the returned object's `tag` will be `false`. (Since `0` is a valid tag, instead of `if (tag)`, use `if (tag !== false)` if you want to check for a tag.) If the X-address is intended for use on test network(s), `test` will be `true`; if it is intended for use on the main network (mainnet), `test` will be `false`.\n\n```js\n> const api = require('ripple-address-codec')\n> api.xAddressToClassicAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\n{\n  classicAddress: 'rGWrZyQqhTp9Xu7G5Pkayo7bXjH4k4QYpf',\n  tag: 4294967295,\n  test: false\n}\n```\n\n### isValidXAddress(xAddress: string): boolean\n\nReturns `true` if the provided X-address is valid, or `false` otherwise.\n\n```js\n> const api = require('ripple-address-codec')\n> api.isValidXAddress('XVLhHMPHU98es4dbozjVtdWzVrDjtV18pX8yuPT7y4xaEHi')\ntrue\n```\n\nReturns `false` for classic addresses (starting with `r`). To validate a classic address, use `isValidClassicAddress`.\n\n### isValidClassicAddress(address: string): boolean\n\nCheck whether a classic address (starting with `r`...) is valid.\n\nReturns `false` for X-addresses (extended addresses). To validate an X-address, use `isValidXAddress`.\n\n### encodeSeed(entropy: UInt8Array, type: 'ed25519' | 'secp256k1'): string\n\nEncode the given entropy as an XRP Ledger seed (secret). The entropy must be exactly 16 bytes (128 bits). The encoding includes which elliptic curve digital signature algorithm (ECDSA) the seed is intended to be used with. The seed is used to produce the private key.\n\n### decodeSeed(seed: string): object\n\nDecode a seed into an object with its version, type, and bytes.\n\nReturn object type:\n```\n{\n  version: number[],\n  bytes: UInt8Array,\n  type: string | null\n}\n```\n\n### encodeAccountID(bytes: UInt8Array): string\n\nEncode bytes as a classic address (starting with `r`...).\n\n### decodeAccountID(accountId: string): UInt8Array\n\nDecode a classic address (starting with `r`...) to its raw bytes.\n\n### encodeNodePublic(bytes: UInt8Array): string\n\nEncode bytes to the XRP Ledger \"node public key\" format (base58).\n\nThis is useful for rippled validators.\n\n### decodeNodePublic(base58string: string): UInt8Array\n\nDecode an XRP Ledger \"node public key\" (in base58 format) into its raw bytes.\n\n### encodeAccountPublic(bytes: UInt8Array): string\n\nEncode a public key, as for payment channels.\n\n### decodeAccountPublic(base58string: string): UInt8Array\n\nDecode a public key, as for payment channels.\n\n### encodeXAddress(accountId: UInt8Array, tag: number | false, test: boolean): string\n\nEncode account ID, tag, and network ID to X-address.\n\n`accountId` must be 20 bytes because it is a RIPEMD160 hash, which is 160 bits (160 bits = 20 bytes).\n\nAt this time, `tag` must be <= MAX_32_BIT_UNSIGNED_INT (4294967295) as the XRP Ledger only supports 32-bit tags.\n\nIf `test` is `true`, this address is intended for use with a test network such as Testnet or Devnet.\n\n### decodeXAddress(xAddress: string): {accountId: UInt8Array, tag: number | false, test: boolean}\n\nConvert an X-address to its classic address, tag, and network ID.\n\n### Other functions\n\n```js\n> var api = require('ripple-address-codec');\n> api.decodeSeed('sEdTM1uX8pu2do5XvTnutH6HsouMaM2')\n{ version: [ 1, 225, 75 ],\n  bytes: [ 76, 58, 29, 33, 63, 189, 251, 20, 199, 194, 141, 96, 148, 105, 179, 65 ],\n  type: 'ed25519' }\n> api.decodeSeed('sn259rEFXrQrWyx3Q7XneWcwV6dfL')\n{ version: 33,\n  bytes: [ 207, 45, 227, 120, 251, 221, 126, 46, 232, 125, 72, 109, 251, 90, 123, 255 ],\n  type: 'secp256k1' }\n> api.decodeAccountID('rJrRMgiRgrU6hDF4pgu5DXQdWyPbY35ErN')\n[ 186,\n  142,\n  120,\n  98,\n  110,\n  228,\n  44,\n  65,\n  180,\n  109,\n  70,\n  195,\n  4,\n  141,\n  243,\n  161,\n  195,\n  200,\n  112,\n  114 ]\n```\n\n## Tests\n\nRun unit tests with:\n\n    npm test\n\nUse `--watch` to run in watch mode, so that when you modify the tests, they are automatically re-run:\n\n    npm test -- --watch\n\nUse `--coverage` to generate and display code coverage information:\n\n    npm test -- --coverage\n\nThis tells jest to output code coverage info in the `./coverage` directory, in addition to showing it on the command line.\n\n## Releases\n\nUse the [xrpl.js release process](https://github.com/XRPLF/xrpl.js/blob/main/CONTRIBUTING.md#release).\n\n## Acknowledgements\n\nThis library references and adopts code and standards from the following sources:\n\n- [XLS-5d Standard for Tagged Addresses](https://github.com/xrp-community/standards-drafts/issues/6) by @nbougalis\n- [XRPL Tagged Address Codec](https://github.com/xrp-community/xrpl-tagged-address-codec) by @WietseWind\n- [X-Address transaction functions](https://github.com/codetsunami/xrpl-tools/tree/master/xaddress-functions) by @codetsunami\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/ripple/ripple-address-codec/master\n[coveralls-url]: https://coveralls.io/r/ripple/ripple-address/codec?branch=master\n[npm-downloads-image]: https://badgen.net/npm/dm/ripple-address-codec\n[npm-url]: https://npmjs.org/package/ripple-address-codec\n[npm-version-image]: https://badgen.net/npm/v/ripple-address-codec\n[travis-image]: https://badgen.net/travis/ripple/ripple-address-codec/master\n[travis-url]: https://travis-ci.org/github/ripple/ripple-address-codec\n","readmeFilename":"README.md"}